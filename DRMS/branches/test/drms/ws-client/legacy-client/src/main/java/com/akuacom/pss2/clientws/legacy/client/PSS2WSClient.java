/*
 * www.akuacom.com - Automating Demand Response
 * 
 * com.akuacom.pss2.clientws.legacy.client.PSS2WSClient.java - Copyright(c)1994 to 2010 by Akuacom . All rights reserved. 
 * Redistribution and use in source and binary forms, with or without modification, is prohibited.
 *
 */

package com.akuacom.pss2.clientws.legacy.client;

import com.akuacom.pss2.clientws.legacy.stubs.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.ConsoleHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSession;
import javax.xml.rpc.Stub;

// this is an example demand repsonse automation server 3 (dras 3) client. 
//
// the client polls the dras web service for the current program level and 
// program event pending signal using jax-rpc. the stub code (contained in the 
// com.akuacom.pss2.wsclient.stub package) was generated by wscompile. note that the
// getPriceSchedule() call is not needed for interfacing the the dras 3 as thus
// is not shown in this example.
//
// this example provides the following functionality:
//  - polls the service for the current program level and program event pending 
//    signal at a fixed configurable period
//  - collects statistics on the communications with the web service
//  - displays the current program level and program event pending signal on the
//    console after each poll
//
// the logic to control the emcs should be called from the pollServer() method
// after each successful poll.
//
// there is a timer threads in the system in addition to the main thread which 
// exists after initialization. the pollServer() method that calls the emcs 
// logic runs in the timer thread.
//
// the behavior of the client is controller by a set of properties. each 
// property has a hard-coded default that can be overridden in a configuration 
// file. there is a hard coded default configuration file name that can be
// overridden on the command line.
//
// all the code in the com.akuacom.pss2.wsclient.stub directory was generated
// by wscompile and should not be modified unless you really know what you are 
// doing.

/**
 * The Class PSS2WSClient.
 */
public class PSS2WSClient {
    // singleton
    /** The Constant INSTANCE. */
    public static final PSS2WSClient INSTANCE = new PSS2WSClient();

    // version number
    /** The Constant VERSION_NUMBER. */
    private static final String VERSION_NUMBER = "1.0";

    // default configuration file name
    /** The Constant DEFAULT_CONFIG_FILE_NAME. */
    private static final String DEFAULT_CONFIG_FILE_NAME = "PSS2WSClient.conf";

    // for each property, there are two macros:
    // - PROP_* the property name
    // - DEFAULT_* is the default value if not overridden in the config file

    // java.util.logging level (SEVERE, WARNING, INFO, CONFIG, FINE, FINER,
    // FINEST)
    /** The Constant PROP_LOG_LEVEL. */
    private static final String PROP_LOG_LEVEL = "logLevel";

    /** The Constant DEFAULT_LOG_LEVEL. */
    private static final String DEFAULT_LOG_LEVEL = Level.INFO.toString();
    // web service endpoint host
    /** The Constant PROP_END_POINT_HOST. */
    private static final String PROP_END_POINT_HOST = "endPointHost";

    /** The Constant DEFAULT_END_POINT_HOST. */
    private static final String DEFAULT_END_POINT_HOST = "pge.openadr.com";
    // web service endpoint port
    /** The Constant PROP_END_POINT_PORT. */
    private static final String PROP_END_POINT_PORT = "endPointPort";

    /** The Constant DEFAULT_END_POINT_PORT. */
    private static final String DEFAULT_END_POINT_PORT = "443";
    // web service endpoint path
    /** The Constant PROP_END_POINT_PATH. */
    private static final String PROP_END_POINT_PATH = "endPointPath";

    /** The Constant DEFAULT_END_POINT_PATH. */
    private static final String DEFAULT_END_POINT_PATH = "PSS2WS/PSS2WS";
    // web service polling period in milliseconds
    /** The Constant PROP_POLL_PERIOD_MS. */
    private static final String PROP_POLL_PERIOD_MS = "pollPeriodMS";

    /** The Constant DEFAULT_POLL_PERIOD_MS. */
    private static final String DEFAULT_POLL_PERIOD_MS = "60000"; // 60 seconds
    // statisics logging period in milliseconds (0 for none)
    /** The Constant PROP_STATS_LOG_PERIOD_MS. */
    private static final String PROP_STATS_LOG_PERIOD_MS = "statsLoggingPeriodMS";

    /** The Constant DEFAULT_STATS_LOG_PERIOD_MS. */
    private static final String DEFAULT_STATS_LOG_PERIOD_MS = "60000"; // 60
                                                                       // seconds
    // username and password
    /** The Constant PROP_USERNAME. */
    private static final String PROP_USERNAME = "username";

    /** The Constant DEFAULT_USERNAME. */
    private static final String DEFAULT_USERNAME = "test";

    /** The Constant PROP_PASSWORD. */
    private static final String PROP_PASSWORD = "password";

    /** The Constant DEFAULT_PASSWORD. */
    private static final String DEFAULT_PASSWORD = "test";
    // ssl (only "true" will use ssl)
    /** The Constant PROP_SLL. */
    private static final String PROP_SLL = "ssl";

    /** The Constant DEFAULT_SSL. */
    private static final String DEFAULT_SSL = "true";
    // ssl trust store file
    /** The Constant PROP_TRUST_STORE. */
    private static final String PROP_TRUST_STORE = "trustStore";

    /** The Constant DEFAULT_TRUST_STORE. */
    private static final String DEFAULT_TRUST_STORE = "./cacerts.jks";
    // ssl trust store password
    /** The Constant PROP_TRUST_STORE_PASSWORD. */
    private static final String PROP_TRUST_STORE_PASSWORD = "trustStorePassword";

    /** The Constant DEFAULT_TRUST_STORE_PASSWORD. */
    private static final String DEFAULT_TRUST_STORE_PASSWORD = "epriceLBL";

    // web service endpoint
    /** The end point. */
    private String endPoint = null;

    // the current price schedule
    /** The program level. */
    private double programLevel = 1.0;

    /** The price schedule. */
    private PriceSchedule priceSchedule;

    // application logger
    /** The logger. */
    public Logger logger = null;

    // web service stub
    /** The pss2. */
    private PSS2WSSEI pss2 = null;

    // timer used for polling and logging
    /** The timer. */
    private Timer timer = new Timer();

    // configuration properties
    /** The config. */
    private Properties config = null;

    // private to enforce singleton
    /**
     * Instantiates a new pS s2 ws client.
     */
    private PSS2WSClient() {
    }

    /**
     * The main method.
     * 
     * @param args
     *            the arguments
     */
    public static void main(String[] args) {
        INSTANCE.initialize(args);
    }

    /**
     * Shutdown.
     */
    public void shutdown() {
        System.out.println("exiting...");
        System.exit(0);
    }

    // initialize everything and fire off the timer threads. note that when
    // this method exits, the main thread dies.
    /**
     * Initialize.
     * 
     * @param args
     *            the args
     */
    public void initialize(String[] args) {
        System.out.println("PPS2WSClient Version " + VERSION_NUMBER);

        // set up the properties
        config = configureProperties(args);

        // set up ssl
        System.setProperty("javax.net.ssl.trustStore",
                config.getProperty(PROP_TRUST_STORE));
        System.setProperty("javax.net.ssl.trustStorePassword",
                config.getProperty(PROP_TRUST_STORE_PASSWORD));
        HostnameVerifier hv = new HostnameVerifier() {
            public boolean verify(String urlHostName, SSLSession session) {
                System.out.println("Warning: URL Host: " + urlHostName
                        + " vs. " + session.getPeerHost());
                return true;
            }
        };
        HttpsURLConnection.setDefaultHostnameVerifier(hv);

        // set up logging
        Level logLevel = Level.parse(config.getProperty(PROP_LOG_LEVEL));
        logger = Logger.getLogger("com.akuacom.pss2.wsclient");
        logger.setLevel(logLevel);
        logger.setUseParentHandlers(false);
        Handler handler = new ConsoleHandler();
        handler.setLevel(logLevel);
        logger.addHandler(handler);

        // set up the endpoint
        if (config.getProperty(PROP_SLL).equals("true")) {
            endPoint = "https://";
        } else {
            endPoint = "http://";
        }
        endPoint += config.getProperty(PROP_END_POINT_HOST) + ":"
                + config.getProperty(PROP_END_POINT_PORT) + "/"
                + config.getProperty(PROP_END_POINT_PATH);
        logger.info("web service endpoint = " + endPoint);

        // create stub
        try {
            Stub stub = (Stub) (new PSS2WS_Impl().getPSS2WSSEIPort());
            stub._setProperty(javax.xml.rpc.Stub.USERNAME_PROPERTY,
                    config.getProperty(PROP_USERNAME));
            stub._setProperty(javax.xml.rpc.Stub.PASSWORD_PROPERTY,
                    config.getProperty(PROP_PASSWORD));
            stub._setProperty(javax.xml.rpc.Stub.ENDPOINT_ADDRESS_PROPERTY,
                    endPoint);

            pss2 = (PSS2WSSEI) stub;
        } catch (Exception ex) {
            ex.printStackTrace();
            shutdown();
        }

        // schedule to polling of the price server
        timer.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                PSS2WSClient.this.pollServer();
            }
        }, 0, Long.parseLong(config.getProperty(PROP_POLL_PERIOD_MS)));

        // schedule the logging of the stats
        long statsLoggingPeriodMS = Long.parseLong(config
                .getProperty(PROP_STATS_LOG_PERIOD_MS));
        if (statsLoggingPeriodMS != 0) {
            timer.scheduleAtFixedRate(new TimerTask() {
                public void run() {
                    Stats.INSTANCE.log();
                }
            }, 0, Long.parseLong(config.getProperty(PROP_STATS_LOG_PERIOD_MS)));
        }
        logger.info("running...");
    }

    // poll the server for the price schedule
    /**
     * Poll server.
     */
    public synchronized void pollServer() {
        logger.fine("polling server");
        try {
            Stats.INSTANCE.preSend();
            // send the last program level received as the only argument
            programLevel = pss2.getPrice(programLevel);
            // priceSchedule = pss2.getPriceSchedule(priceSchedule);
            boolean programEventPending = pss2.isAPEEventPending();
            Stats.INSTANCE.sendSuccess();

            logger.info("Program Level: "
                    + programLevelDoubleToString(programLevel) +
                    // "\nSchedule: " + programLevelDoubleToString(
                    // priceSchedule.getCurrentPriceDPKWH()) +
                    "\nEvent Pending: " + (programEventPending ? "YES" : "NO"));

            // place hook into emcs here. example:
            //
            // if(programLevel == 1.0)
            // set normal shed
            // else if(programLevel == 3.0)
            // set moderate shed
            // else if(programLevel == 5.0)
            // set high shed
            //
            // if(programEventPending)
            // set precool
        } catch (Exception e) {
            e.printStackTrace();
            Stats.INSTANCE.sendFailure();
            return;
        }
    }

    // configure the program properties
    /**
     * Configure properties.
     * 
     * @param args
     *            the args
     * 
     * @return the properties
     */
    private Properties configureProperties(String[] args) {
        // default the configu file name
        String configFileName = DEFAULT_CONFIG_FILE_NAME;

        // if there are any command line arguments, assume the first one is the
        // configuration file name and ignore all the others
        if (args.length >= 1) {
            configFileName = args[0];
        }
        if (args.length > 1) {
            System.out.println("ignoring extra command line arguments");
        }

        // setup the default configuration
        Properties defaultConfig = new Properties();
        defaultConfig.put(PROP_LOG_LEVEL, DEFAULT_LOG_LEVEL);
        defaultConfig.put(PROP_END_POINT_HOST, DEFAULT_END_POINT_HOST);
        defaultConfig.put(PROP_END_POINT_PORT, DEFAULT_END_POINT_PORT);
        defaultConfig.put(PROP_END_POINT_PATH, DEFAULT_END_POINT_PATH);
        defaultConfig.put(PROP_POLL_PERIOD_MS, DEFAULT_POLL_PERIOD_MS);
        defaultConfig
                .put(PROP_STATS_LOG_PERIOD_MS, DEFAULT_STATS_LOG_PERIOD_MS);
        defaultConfig.put(PROP_USERNAME, DEFAULT_USERNAME);
        defaultConfig.put(PROP_PASSWORD, DEFAULT_PASSWORD);
        defaultConfig.put(PROP_SLL, DEFAULT_SSL);
        defaultConfig.put(PROP_TRUST_STORE, DEFAULT_TRUST_STORE);
        defaultConfig.put(PROP_TRUST_STORE_PASSWORD,
                DEFAULT_TRUST_STORE_PASSWORD);

        // create the poperties object using the deafults and then read in any
        // custimazations from the configu file
        Properties config = new Properties(defaultConfig);

        // read the config file
        File configFile = new File(configFileName);
        System.out.println("configuration file = "
                + configFile.getAbsolutePath());
        if (!configFile.isFile()) {
            System.out.println("configuration file not found - using defaults");
        } else {
            try {
                FileInputStream in = new FileInputStream(configFile);
                config.load(in);
            } catch (IOException e) {
                System.out
                        .println("error reading configuration file - using defaults");
            }
        }

        // dump properties
        config.list(System.out);
        System.out.println("------------------------");

        return config;
    }

    /**
     * Program level double to string.
     * 
     * @param programLevel
     *            the program level
     * 
     * @return the string
     */
    private String programLevelDoubleToString(double programLevel) {
        if (programLevel == 1.0) {
            return "NORMAL";
        } else if (programLevel == 3.0) {
            return "MODERATE";
        } else if (programLevel == 5.0) {
            return "HIGH";
        } else {
            return "UNKNOWN";
        }
    }
}