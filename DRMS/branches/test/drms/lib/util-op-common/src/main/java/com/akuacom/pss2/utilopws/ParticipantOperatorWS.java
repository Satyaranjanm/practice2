/*
 * www.akuacom.com - Automating Demand Response
 *
 * com.akuacom.pss2.utilopws.ParticipantOperatorWS.java - Copyright(c)1994 to 2010 by Akuacom . All rights reserved.
 * Redistribution and use in source and binary forms, with or without modification, is prohibited.
 *
 */

package com.akuacom.pss2.utilopws;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import org.apache.log4j.Logger;
import org.jboss.ws.annotation.SchemaValidation;
import org.openadr.dras.bid.Bid;
import org.openadr.dras.drasclient.CommsStatus;
import org.openadr.dras.drasclient.DRASClient;
import org.openadr.dras.drasclient.ListOfCommsStatus;
import org.openadr.dras.drasclient.ListOfDRASClients;
import org.openadr.dras.eventinfo.ListOfEventInfoType;
import org.openadr.dras.eventstate.ListOfEventStates;
import org.openadr.dras.feedback.FeedBack;
import org.openadr.dras.feedback.ListOfFeedback;
import org.openadr.dras.logs.ListOfDRASClientAlarms;
import org.openadr.dras.logs.ListOfTransactionLogs;
import org.openadr.dras.optoutstate.ListOfOptOutStates;
import org.openadr.dras.optoutstate.OptOutState;
import org.openadr.dras.participantaccount.ListOfParticipantAccountIDs;
import org.openadr.dras.participantaccount.ListOfParticipantAccounts;
import org.openadr.dras.participantaccount.ParticipantAccount;
import org.openadr.dras.participantoperator.ParticipantOperator;
import org.openadr.dras.programconstraint.DateTimeWindow;
import org.openadr.dras.programconstraint.ListOfProgramConstraints;
import org.openadr.dras.programconstraint.ProgramConstraint;
import org.openadr.dras.responseschedule.ResponseSchedule;
import org.openadr.dras.utilitydrevent.ListOfEventIDs;
import org.openadr.dras.utilityprogram.ListOfIDs;
import org.openadr.dras.utilityprogram.ListOfProgramNames;
import org.openadr.dras.utilityprogram.ParticipantList;

import com.akuacom.ejb.client.EJB3Factory;
import com.akuacom.pss2.client.ClientManager;
import com.akuacom.pss2.client.ClientManagerBean;
import com.akuacom.pss2.client.ClientStatus;
import com.akuacom.pss2.core.ErrorResourceUtil;
import com.akuacom.pss2.core.FireLogReaderBean;
import com.akuacom.pss2.event.Event;
import com.akuacom.pss2.event.EventInfo;
import com.akuacom.pss2.event.EventManager;
import com.akuacom.pss2.event.EventManagerBean;
import com.akuacom.pss2.participant.Participant;
import com.akuacom.pss2.participant.ParticipantExtInfo;
import com.akuacom.pss2.participant.ParticipantManager;
import com.akuacom.pss2.participant.ParticipantManagerBean;
import com.akuacom.pss2.program.Program;
import com.akuacom.pss2.program.ProgramManager;
import com.akuacom.pss2.program.ProgramManagerBean;
import com.akuacom.pss2.program.bidding.BiddingProgramManager;
import com.akuacom.pss2.program.bidding.BiddingProgramManagerBean;
import com.akuacom.pss2.program.dbp.BidEntry;
import com.akuacom.pss2.program.dbp.DBPEvent;
import com.akuacom.pss2.program.participant.ProgramParticipantManager;
import com.akuacom.pss2.program.participant.ProgramParticipantManagerBean;
import com.akuacom.pss2.util.EventState;
import com.akuacom.pss2.util.LogUtils;
import com.kanaeki.firelog.util.FireLogEntry;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.1-b03- Generated
 * source version: 2.0
 */
@WebService(name = "ParticipantOperator",
        targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
        wsdlLocation = "WEB-INF/wsdl/ParticipantOperatorWSService.wsdl")
public class ParticipantOperatorWS implements ParticipantOperator {

    /** The Constant log. */
    private static final Logger log = Logger
            .getLogger(ParticipantOperatorWS.class.getName());

    /** The program manager. */
    private EventManager.L _eventManager = EJB3Factory
            .getLocalBean(EventManagerBean.class);

    private ProgramManager.L programManager1 = EJB3Factory
            .getLocalBean(ProgramManagerBean.class);

    private ProgramParticipantManager.L programParticipantManager = EJB3Factory
            .getLocalBean(ProgramParticipantManagerBean.class);

    /** The participant manager. */
    private ParticipantManager.L participantManager = EJB3Factory
            .getLocalBean(ParticipantManagerBean.class);

    private ClientManager.L clientManager = EJB3Factory
            .getLocalBean(ClientManagerBean.class);

    /** The bidding program manager. */
    private BiddingProgramManager.L biddingProgramManager = EJB3Factory
            .getLocalBean(BiddingProgramManagerBean.class);

    /**
     * This function is used to get the Participants account information. The
     * ParticipantAccounts to fetchcan be specified either as a list of
     * ParticipantAccount identifiers or as a participantGroup identifier.
     * 
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the return values.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantIDs
     *            the participant i ds
     * @param participantGroup
     *            the participant group
     * @param participantAccounts
     *            the participant accounts
     * @param returnValue
     *            the return value
     * 
     *            returns participantaccount.ListOfParticipantAccounts
     */
    @WebMethod(
            operationName = "GetParticipantAccounts",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/NewOperation")
    @RequestWrapper(
            localName = "GetParticipantAccounts",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetParticipantAccounts")
    @ResponseWrapper(
            localName = "GetParticipantAccountsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetParticipantAccountsResponse")
    public void getParticipantAccounts(
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfParticipantAccountIDs participantIDs,
            @WebParam(name = "participantGroup", targetNamespace = "") String participantGroup,
            @WebParam(name = "participantAccounts", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfParticipantAccounts> participantAccounts,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        ListOfParticipantAccounts ret = new ListOfParticipantAccounts();

        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(participantIDs,
                    participantGroup, "DESCRIPTION_PO_getParticipantAccounts"));
            if (participantIDs == null
                    || participantIDs.getParticipantAccountID() == null)
                participantIDs = new ListOfParticipantAccountIDs();
            List<String> partIdList = participantIDs.getParticipantAccountID();

            for (String partId : partIdList) {
                Participant part = participantManager
                        .getParticipantByAccount(partId);

                List<Program> progList = participantManager
                        .getProgramsForParticipantAsObject(part.getUser(),
                                part.isClient());
                ParticipantAccount pa = BeanMappingUtil.getParticipantAccount(
                        part, progList);
                ret.getParticipantAccount().add(pa);
            }
            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        participantAccounts.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to modify existing Participant Accounts. While
     * certain fields of the Participant Account may be viewed by a Participant
     * Manager they may not be modified. These fields include the following:
     * 
     * - Participant uid
     * 
     * - Participant name
     * 
     * - User name
     * 
     * -Program names
     * 
     * This method may be used to modify more than one ParticipantAccount. The
     * ParticipantAccounts to modify can be specified either as a list of
     * ParticipantAccount identifiers or as a participantGroup identifier.
     * 
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are that
     * are being accessed.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantIDs
     *            the participant i ds
     * @param participantGroup
     *            the participant group
     * @param participantAccount
     *            the participant account
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "ModifyParticipantAccounts",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/ModifyParticipantAccounts")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "ModifyParticipantAccounts",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.ModifyParticipantAccounts")
    @ResponseWrapper(
            localName = "ModifyParticipantAccountsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.ModifyParticipantAccountsResponse")
    public String modifyParticipantAccounts(
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfParticipantAccountIDs participantIDs,
            @WebParam(name = "participantGroup", targetNamespace = "") String participantGroup,
            @WebParam(name = "participantAccount", targetNamespace = "") ParticipantAccount participantAccount) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(participantIDs,
                    participantGroup, participantAccount,
                    "DESCRIPTION_PO_modifyParticipantAccounts"));
            if (participantIDs == null
                    || participantIDs.getParticipantAccountID() == null)
                participantIDs = new ListOfParticipantAccountIDs();

            List<ParticipantExtInfo> paiList = new ArrayList<ParticipantExtInfo>();
            for (String acctID : participantIDs.getParticipantAccountID()) {
                Participant part;
                part = participantManager.getParticipantByAccount(acctID);

                if (part == null) {
                    String error = ErrorResourceUtil.getErrorMessage(
                            "ERROR_PARTICIPANT_NOT_EXIST", acctID);
                    throw new Exception(error);
                } else {
                    List<String> progNames = participantManager
                            .getProgramsForParticipant(part.getUser(),
                                    part.isClient());
                    if (progNames != null
                            && participantAccount.getPrograms() != null) {
                        if (participantAccount.getPrograms().getProgram()
                                .size() != progNames.size()) {
                            String error = ErrorResourceUtil.getErrorMessage(
                                    "ERROR_PARTICIPANT_CREATE_INVALIDE_INPUT",
                                    acctID);
                            throw new Exception(error);
                        }

                        for (org.openadr.dras.utilityprogram.ProgramInfo info : participantAccount
                                .getPrograms().getProgram()) {
                            if (!progNames.contains(info.getProgramName())) {
                                String error = ErrorResourceUtil
                                        .getErrorMessage(
                                                "ERROR_PARTICIPANT_CREATE_INVALIDE_INPUT",
                                                acctID);
                                throw new Exception(error);
                            }
                        }
                    }

                    if ((progNames != null && participantAccount.getPrograms() == null)
                            || (progNames == null && participantAccount
                                    .getPrograms() != null)) {
                        String error = ErrorResourceUtil.getErrorMessage(
                                "ERROR_PARTICIPANT_CREATE_INVALIDE_INPUT",
                                acctID);
                        throw new Exception(error);
                    }

                    if (!participantAccount.getAccountID().equals(
                            part.getAccountNumber())
                            || !participantAccount.getParticipantName().equals(
                                    part.getUser())
                            || participantAccount.getPrograms().getProgram()
                                    .size() != progNames.size()) {
                        ParticipantExtInfo partExt = BeanMappingUtil
                                .getParticipantExtInfo(participantAccount, part);
                        paiList.add(partExt);
                    } else {
                        String error = ErrorResourceUtil.getErrorMessage(
                                "ERROR_PARTICIPANT_CREATE_INVALIDE_INPUT",
                                acctID);
                        throw new Exception(error);
                    }
                }
            }
            participantManager.updateParticipantAccount(paiList);

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * Description This function is used to create a DRAS Client. Note that
     * Program constraints and Response schedules may be created through a
     * separate set of functions and need not be created using this function.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param drasClient
     *            the dras client
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "CreateDRASClient",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/CreateDRASClient")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "CreateDRASClient",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.CreateDRASClient")
    @ResponseWrapper(
            localName = "CreateDRASClientResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.CreateDRASClientResponse")
    public String createDRASClient(@WebParam(name = "DRASClient",
            targetNamespace = "") DRASClient drasClient) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClient,
                    "DESCRIPTION_PO_createDRASClient"));
            // todo 0313 new method for drasClient
            List<String> participants = participantManager.getParticipants();
            List<String> dupList = new ArrayList<String>();
            for (String particpantName : participants) {
                Participant pariticpant = participantManager
                        .getParticipant(particpantName);
                if (pariticpant.getAccountNumber().equalsIgnoreCase(
                        drasClient.getParticipantID())) {
                    dupList.add(pariticpant.getAccountNumber());
                    break;
                }
            }

            if (dupList.size() > 0) {
                String error = ErrorResourceUtil.getErrorMessage(
                        "ERROR_CREATE_PARTICIPANT_ALREADY_EXIST", dupList);
                throw new Exception(error);
            }

            // TODO lin: in the current system, the participant is a drasClient.
            // Can't add drasClient to a participant.
            String error = ErrorResourceUtil.getErrorMessage(
                    "ERROR_EVENT_CHANGE_PARTICIPANT_NOT_ALLOWED",
                    drasClient.getParticipantID());
            throw new Exception(error);

        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to modify an existing DRASClient object.
     * 
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param drasClient
     *            the dras client
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "ModifyDRASClient",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/ModifyDRASClient")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "ModifyDRASClient",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.ModifyDRASClient")
    @ResponseWrapper(
            localName = "ModifyDRASClientResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.ModifyDRASClientResponse")
    public String modifyDRASClient(@WebParam(name = "DRASClient",
            targetNamespace = "") DRASClient drasClient) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        // todo 0313 new method for drasClient
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClient,
                    "DESCRIPTION_PO_modifyDRASClient"));

            // TODO lin: in the current system, the participant is a drasClient.
            // Should only modify participant if neccessary.
            String error = ErrorResourceUtil.getErrorMessage(
                    "ERROR_EVENT_CHANGE_PARTICIPANT_NOT_ALLOWED",
                    drasClient.getParticipantID());
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to delete an existing DRAS Client.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param drasClientID
     *            the dras client id
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "DeleteDRASClient",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/DeleteDRASClient")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "DeleteDRASClient",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.DeleteDRASClient")
    @ResponseWrapper(
            localName = "DeleteDRASClientResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.DeleteDRASClientResponse")
    public String deleteDRASClient(@WebParam(name = "DRASClientID",
            targetNamespace = "") String drasClientID) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientID,
                    "DESCRIPTION_PO_deleteDRASClient"));
            // todo 0313 new method for drasClient
            // TODO lin: in the current system, the participant is a drasClient.
            // Can't delete drasClient to a participant.
            String error = ErrorResourceUtil.getErrorMessage(
                    "ERROR_EVENT_CHANGE_PARTICIPANT_NOT_ALLOWED", drasClientID);
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to fetch DRAS Client information associated with
     * Participant. They may be fetched by specifying either DRASClient
     * identifiers or ParticipantAccount identifiers.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantIDs
     *            the participant i ds
     * @param participantGroup
     *            the participant group
     * @param drasClientIDs
     *            the dras client i ds
     * @param drasClients
     *            the dras clients
     * @param returnValue
     *            the return value
     * 
     *            returns drasclient.ListOfDRASClients
     */
    @WebMethod(
            operationName = "GetDRASClientInfo",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDRASClientInfo")
    @RequestWrapper(
            localName = "GetDRASClientInfo",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDRASClientInfo")
    @ResponseWrapper(
            localName = "GetDRASClientInfoResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDRASClientInfoResponse")
    public void getDRASClientInfo(
            @WebParam(name = "DRASClientIDs", targetNamespace = "") ListOfIDs drasClientIDs,
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfParticipantAccountIDs participantIDs,
            @WebParam(name = "participantGroup", targetNamespace = "") String participantGroup,
            @WebParam(name = "DRASClients", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfDRASClients> drasClients,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        ListOfDRASClients ret = new ListOfDRASClients();
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            // todo 0313 new method for drasClient confirm ResponseSchedule
            // detail
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientIDs,
                    participantIDs, participantGroup,
                    "DESCRIPTION_PO_getDRASClientInfo"));
            logEntry.setDescription("SUCCESS");
            if (participantIDs == null
                    || participantIDs.getParticipantAccountID() == null)
                participantIDs = new ListOfParticipantAccountIDs();
            if (drasClientIDs == null)
                drasClientIDs = new ListOfIDs();
            List<String> partIdList = participantIDs.getParticipantAccountID();
            for (String partId : partIdList) {
                Participant part = participantManager
                        .getParticipantByAccount(partId);
                // todo 0313
                List<Program> progList = participantManager
                        .getProgramsForParticipantAsObject(part.getUser(),
                                part.isClient());
                DRASClient pa = BeanMappingUtil.getDRASClient(part, progList);
                ret.getDrasClient().add(pa);
            }
            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        drasClients.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to fetch the ProgramCconstraints object associated
     * with the Participant as a whole. The specification for which
     * ParticipantAccounts to access can me made using either a list of
     * ParticipantAccount identifers of the DRASClients, or a Participant Group
     * identifier.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantIDs
     *            the participant i ds
     * @param participantGroup
     *            the participant group
     * @param programName
     *            the program name
     * @param programConstraints
     *            the program constraints
     * @param returnValue
     *            the return value
     * 
     *            returns programconstraint.ListOfProgramConstraints
     */
    @WebMethod(
            operationName = "GetParticipantProgramConstraints",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetParticipantProgramConstraints")
    @RequestWrapper(
            localName = "GetParticipantProgramConstraints",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetParticipantProgramConstraints")
    @ResponseWrapper(
            localName = "GetParticipantProgramConstraintsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetParticipantProgramConstraintsResponse")
    public void getParticipantProgramConstraints(
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfParticipantAccountIDs participantIDs,
            @WebParam(name = "programName", targetNamespace = "") String programName,
            @WebParam(name = "participantGroup", targetNamespace = "") String participantGroup,
            @WebParam(name = "programConstraints", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfProgramConstraints> programConstraints,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        ListOfProgramConstraints ret = new ListOfProgramConstraints();
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        // todo 0313 new implementation
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(participantIDs,
                    programName, participantGroup,
                    "DESCRIPTION_PO_getParticipantProgramConstraints"));

            Program program = null;
            List<String> existingParts = null;
            if (programName != null && !programName.isEmpty()) {
                program = programManager1.getProgram(programName);
                existingParts = programParticipantManager
                        .getParticipantsForProgram(programName);
            }
            if (participantIDs == null
                    || participantIDs.getParticipantAccountID() == null)
                participantIDs = new ListOfParticipantAccountIDs();

            for (String accountNumber : participantIDs
                    .getParticipantAccountID()) {
                Participant part = participantManager
                        .getParticipantByAccount(accountNumber);
                if (existingParts != null
                        && existingParts.contains(part.getUser())) {
                    ProgramConstraint constraint = BeanMappingUtil
                            .getProgramConstraint(program, null);
                    constraint.setParticipantID(accountNumber);
                    ret.getProgramConstraint().add(constraint);
                } else if (existingParts == null) {
                    ProgramConstraint constraint = BeanMappingUtil
                            .getProgramConstraint(program, null);
                    constraint.setParticipantID(accountNumber);
                    ret.getProgramConstraint().add(constraint);
                }

            }

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        programConstraints.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to set the program constraints associated with a
     * Participant as a whole. If program constraints already exist for the
     * program specified then they are superseded by the constraints passed into
     * this function. The specification for which ParticipantAccounts to access
     * can me made using either a list of ParticipantAccount identifers of the
     * DRASClients, or a Participant Group identifier.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are that
     * are being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param programConstraint
     *            the program constraint
     * @param participantIDs
     *            the participant i ds
     * @param participantGroup
     *            the participant group
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "SetParticipantProgramConstraints",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/SetParticipantProgramConstraints")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "SetParticipantProgramConstraints",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SetParticipantProgramConstraints")
    @ResponseWrapper(
            localName = "SetParticipantProgramConstraintsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SetParticipantProgramConstraintsResponse")
    public String setParticipantProgramConstraints(
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfParticipantAccountIDs participantIDs,
            @WebParam(name = "participantGroup", targetNamespace = "") String participantGroup,
            @WebParam(name = "programConstraint", targetNamespace = "") ProgramConstraint programConstraint) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        // todo 0313 new implementation
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(participantIDs,
                    programConstraint, participantGroup,
                    "DESCRIPTION_PO_setParticipantProgramConstraints"));
            if (participantIDs == null
                    || participantIDs.getParticipantAccountID() == null)
                participantIDs = new ListOfParticipantAccountIDs();
            String error = ErrorResourceUtil.getErrorMessage(
                    "ERROR_PARTICIPANT_PROGRAM_CONSTRAIT_CHANGE_NOT_ALLOWED",
                    participantIDs.getParticipantAccountID().toString());
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to delete the ProgramConstraints associated with a
     * program. The specification for which ParticipantAccounts to access can me
     * made using either a list of ParticipantAccount identifers of the
     * DRASClients, or a Participant Group identifier.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are that
     * are being accessed.
     * 
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantIDs
     *            the participant i ds
     * @param participantGroup
     *            the participant group
     * @param programName
     *            the program name
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "DeleteParticipantProgramConstraints",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/DeleteParticipantProgramConstraints")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "DeleteParticipantProgramConstraints",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.DeleteParticipantProgramConstraints")
    @ResponseWrapper(
            localName = "DeleteParticipantProgramConstraintsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.DeleteParticipantProgramConstraintsResponse")
    public String deleteParticipantProgramConstraints(
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfParticipantAccountIDs participantIDs,
            @WebParam(name = "participantGroup", targetNamespace = "") String participantGroup,
            @WebParam(name = "programName", targetNamespace = "") String programName) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            // todo 0313 new implementation
            if (participantIDs == null
                    || participantIDs.getParticipantAccountID() == null)
                participantIDs = new ListOfParticipantAccountIDs();
            logEntry.setLongDescr(StringUtil.createLongDesc(participantIDs,
                    programName, participantGroup,
                    "DESCRIPTION_PO_deleteParticipantProgramConstraints"));

            String error = ErrorResourceUtil.getErrorMessage(
                    "ERROR_PARTICIPANT_PROGRAM_CONSTRAIT_CHANGE_NOT_ALLOWED",
                    participantIDs.getParticipantAccountID().toString());
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to fetch the program constraints associated with
     * the DRAS Client. The specification for which DRASClients to access can me
     * made using either a list of DRAClient identifiers, the ParticipantAccount
     * identifers of the DRASClients, or a Participant Group identifier.
     * 
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantIDs
     *            the participant i ds
     * @param participantGroup
     *            the participant group
     * @param drasClientIDs
     *            the dras client i ds
     * @param programConstraints
     *            the program constraints
     * @param returnValue
     *            the return value
     * 
     *            returns programconstraint.ListOfProgramConstraints
     */
    @WebMethod(
            operationName = "GetDRASClientProgramConstraints",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDRASClientProgramConstraints")
    @RequestWrapper(
            localName = "GetDRASClientProgramConstraints",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDRASClientProgramConstraints")
    @ResponseWrapper(
            localName = "GetDRASClientProgramConstraintsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDRASClientProgramConstraintsResponse")
    public void getDRASClientProgramConstraints(
            @WebParam(name = "drasClientIDs", targetNamespace = "") ListOfIDs drasClientIDs,
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfParticipantAccountIDs participantIDs,
            @WebParam(name = "participantGroup", targetNamespace = "") String participantGroup,
            @WebParam(name = "programConstraints", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfProgramConstraints> programConstraints,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        ListOfProgramConstraints ret = new ListOfProgramConstraints();
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            // todo 0313 new implementation
            if (participantIDs == null
                    || participantIDs.getParticipantAccountID() == null)
                participantIDs = new ListOfParticipantAccountIDs();
            if (drasClientIDs == null)
                drasClientIDs = new ListOfIDs();

            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientIDs,
                    participantIDs, participantGroup,
                    "DESCRIPTION_PO_getDRASClientProgramConstraints"));

            this.getParticipantProgramConstraints(participantIDs, null, "",
                    programConstraints, returnValue);
            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        returnValue.value = retCode;
    }

    /**
     * This function is used to set the program constraints associated with a
     * DRASClient. If program constraints already exist for the program
     * specified then they are superseded by the constraints passed into this
     * function. The specification for which DRASClients to access can me made
     * using either a list of DRAClient identifiers, the ParticipantAccount
     * identifers of the DRASClients, or a Participant Group identifier.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param programConstraint
     *            the program constraint
     * @param participantIDs
     *            the participant i ds
     * @param participantGroup
     *            the participant group
     * @param drasClientIDs
     *            the dras client i ds
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "SetDRASClientProgramConstraints",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/SetDRASClientProgramConstraints")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "SetDRASClientProgramConstraints",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SetDRASClientProgramConstraints")
    @ResponseWrapper(
            localName = "SetDRASClientProgramConstraintsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SetDRASClientProgramConstraintsResponse")
    public String setDRASClientProgramConstraints(
            @WebParam(name = "drasClientIDs", targetNamespace = "") ListOfIDs drasClientIDs,
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfParticipantAccountIDs participantIDs,
            @WebParam(name = "participantGroup", targetNamespace = "") String participantGroup,
            @WebParam(name = "programConstraint", targetNamespace = "") ProgramConstraint programConstraint) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            // todo 0313 new implementation
            if (participantIDs == null
                    || participantIDs.getParticipantAccountID() == null)
                participantIDs = new ListOfParticipantAccountIDs();
            if (drasClientIDs == null)
                drasClientIDs = new ListOfIDs();
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientIDs,
                    participantIDs, programConstraint, participantGroup,
                    "DESCRIPTION_PO_setDRASClientProgramConstraints"));
            String error = ErrorResourceUtil.getErrorMessage(
                    "ERROR_DRAS_CLIENT_PROGRAM_CONSTRAIT_CHANGE_NOT_ALLOWED",
                    participantIDs.getParticipantAccountID().toString());
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to delete the DRASClient onstraints associated with
     * a program. The specification for which DRASClients to access can me made
     * using either a list of DRAClient identifiers, the ParticipantAccount
     * identifers of the DRASClients, or a Participant Group identifier.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantIDs
     *            the participant i ds
     * @param participantGroup
     *            the participant group
     * @param drasClientIDs
     *            the dras client i ds
     * @param programName
     *            the program name
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "DeleteDRASClientProgramConstraints",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/DeleteDRASClientProgramConstraints")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "DeleteDRASClientProgramConstraints",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.DeleteDRASClientProgramConstraints")
    @ResponseWrapper(
            localName = "DeleteDRASClientProgramConstraintsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.DeleteDRASClientProgramConstraintsResponse")
    public String deleteDRASClientProgramConstraints(
            @WebParam(name = "drasClientIDs", targetNamespace = "") ListOfIDs drasClientIDs,
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfParticipantAccountIDs participantIDs,
            @WebParam(name = "participantGroup", targetNamespace = "") String participantGroup,
            @WebParam(name = "programName", targetNamespace = "") String programName) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            // todo 0313 new implementation
            if (participantIDs == null
                    || participantIDs.getParticipantAccountID() == null)
                participantIDs = new ListOfParticipantAccountIDs();
            if (drasClientIDs == null)
                drasClientIDs = new ListOfIDs();
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientIDs,
                    participantIDs, programName, participantGroup,
                    "DESCRIPTION_PO_deleteDRASClientProgramConstraints"));

            String error = ErrorResourceUtil.getErrorMessage(
                    "ERROR_DRAS_CLIENT_PROGRAM_CONSTRAIT_CHANGE_NOT_ALLOWED",
                    participantIDs.getParticipantAccountID().toString());
            throw new Exception(error);

        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to retrieve the information necessary to help an
     * operator edit and specify a Response Schedule and its Operating States.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are that
     * are being accessed.
     * 
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param programConstraints
     *            the program constraints
     * @param drasClientID
     *            the dras client id
     * @param eventInfo
     *            the event info
     * @param programName
     *            the program name
     * @param returnValue
     *            the return value
     */
    @WebMethod(
            operationName = "GetProgramInformation",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetProgramInformation")
    @RequestWrapper(
            localName = "GetProgramInformation",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetProgramInformation")
    @ResponseWrapper(
            localName = "GetProgramInformationResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetProgramInformationResponse")
    public void getProgramInformation(
            @WebParam(name = "programName", targetNamespace = "") String programName,
            @WebParam(name = "drasClientID", targetNamespace = "") String drasClientID,
            @WebParam(name = "programConstraints", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ProgramConstraint> programConstraints,
            @WebParam(name = "eventInfo", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfEventInfoType> eventInfo,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        ProgramConstraint ret1 = new ProgramConstraint();
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientID,
                    programName, "DESCRIPTION_PO_getProgramInformation"));
            Program prog = programManager1.getProgramOnly(programName);
            ret1 = BeanMappingUtil.getProgramConstraint(prog, null);

            // todo 0313 confirm with Ed on ListOfEventInfoType list
            // TODO lin get eventInfoTypes
            // ret2 =
            // BeanMappingUtil.getProgramUtil().getEventInfoTypes().getEventInfoType();
            // eventInfo.value = ret2;
            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        programConstraints.value = ret1;
        returnValue.value = retCode;
    }

    /**
     * This function is used to create a response schedule for a specific Simple
     * DRAS Client and program. If the response schedule for the DRAS Client and
     * program already exists then it is superseded by the new Response Schedule
     * passed into this function.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param responseSchedule
     *            the response schedule
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "CreateResponseSchedule",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/CreateResponseSchedule")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "CreateResponseSchedule",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.CreateResponseSchedule")
    @ResponseWrapper(
            localName = "CreateResponseScheduleResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.CreateResponseScheduleResponse")
    public String createResponseSchedule(@WebParam(name = "responseSchedule",
            targetNamespace = "") ResponseSchedule responseSchedule) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            // todo 0313 confirm ResponseSchedule
            logEntry.setLongDescr(StringUtil.createLongDesc(responseSchedule,
                    "DESCRIPTION_PO_createResponseSchedule"));

            List<String> params = new ArrayList<String>();
            params.add(responseSchedule.getDRASClientID());
            params.add(responseSchedule.getProgramName());
            String error = ErrorResourceUtil.getErrorMessage(
                    "ERROR_CREATE_RESPONSE_SCHEDULE", params);
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to delete an existing Responsechedule assiciated
     * with a Simple DRAS Client.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param drasClientID
     *            the dras client id
     * @param programName
     *            the program name
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "DeleteResponseSchedule",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/DeleteResponseSchedule")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "DeleteResponseSchedule",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.DeleteResponseSchedule")
    @ResponseWrapper(
            localName = "DeleteResponseScheduleResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.DeleteResponseScheduleResponse")
    public String deleteResponseSchedule(@WebParam(name = "programName",
            targetNamespace = "") String programName, @WebParam(
            name = "drasClientID", targetNamespace = "") String drasClientID) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientID,
                    programName, "DESCRIPTION_PO_deleteResponseSchedule"));

            List<String> params = new ArrayList<String>();
            params.add(drasClientID);
            params.add(programName);
            String error = ErrorResourceUtil.getErrorMessage(
                    "ERROR_DELETE_RESPONSE_SCHEDULE", params);
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to fetch a specific ResponseSchedule corresponding
     * to a Program and a DRASClient.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param drasClientID
     *            the dras client id
     * @param programName
     *            the program name
     * @param responseSchedule
     *            the response schedule
     * @param returnValue
     *            the return value
     * 
     *            returns responseschedule.ResponseSchedule
     */
    @WebMethod(
            operationName = "GetResponseSchedule",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetResponseSchedule")
    @RequestWrapper(
            localName = "GetResponseSchedule",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetResponseSchedule")
    @ResponseWrapper(
            localName = "GetResponseScheduleResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetResponseScheduleResponse")
    public void getResponseSchedule(
            @WebParam(name = "programName", targetNamespace = "") String programName,
            @WebParam(name = "drasClientID", targetNamespace = "") String drasClientID,
            @WebParam(name = "responseSchedule", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ResponseSchedule> responseSchedule,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        ResponseSchedule ret = new ResponseSchedule();
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientID,
                    programName, "DESCRIPTION_PO_getResponseSchedule"));
            List<String> params = new ArrayList<String>();
            params.add(drasClientID);
            params.add(programName);
            String error = ErrorResourceUtil.getErrorMessage(
                    "ERROR_GET_RESPONSE_SCHEDULE", params);
            ret = null;
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        responseSchedule.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to send information to the DRAS concerning the
     * state of the facility and how the Participant/DRAS Client reacted to the
     * DR Event being issued.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the return values.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - DRAS Client associated with the Participant ID
     * 
     * - Participant Manager associated with the Participant ID
     * 
     * @param feedBack
     *            the feed back
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "SetDREventFeedback",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/SetDREventFeedback")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "SetDREventFeedback",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SetDREventFeedback")
    @ResponseWrapper(
            localName = "SetDREventFeedbackResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SetDREventFeedbackResponse")
    public String setDREventFeedback(@WebParam(name = "feedBack",
            targetNamespace = "") FeedBack feedBack) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(feedBack,
                    "DESCRIPTION_PO_setDREventFeedback"));
            List<String> params = new ArrayList<String>();
            params.add(feedBack.getDRASClientID());
            params.add(feedBack.getParticipantID());
            params.add(feedBack.getEventID());
            params.add(feedBack.getProgramName());
            String error = ErrorResourceUtil.getErrorMessage(
                    "ERROR_CREATE_FEEDBACK", params);
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to set a Participants standing bid for a program.
     * If a standing bid for the program already exists then this function can
     * be used to modify it.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the ParticipantAccounts that
     * correspond to the Bid being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param bid
     *            the bid
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "SubmitStandingBid",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/SubmitStandingBid")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "SubmitStandingBid",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SubmitStandingBid")
    @ResponseWrapper(
            localName = "SubmitStandingBidResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SubmitStandingBidResponse")
    public String submitStandingBid(@WebParam(name = "bid",
            targetNamespace = "") Bid bid) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(bid,
                    "DESCRIPTION_PO_submitStandingBid"));
            // todo 0313 new method in pm
            // Add logic here

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function returns a Participants standing bid for a particular
     * program.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the ParticipantAccounts that
     * correspond to the Bid being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantID
     *            the participant id
     * @param programName
     *            the program name
     * @param bid
     *            the bid
     * @param returnValue
     *            the return value
     * 
     *            returns bid.Bid
     */
    @WebMethod(
            operationName = "GetStandingBid",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetStandingBid")
    @RequestWrapper(
            localName = "GetStandingBid",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetStandingBid")
    @ResponseWrapper(
            localName = "GetStandingBidResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetStandingBidResponse")
    public void getStandingBid(@WebParam(name = "participantID",
            targetNamespace = "") String participantID, @WebParam(
            name = "programName", targetNamespace = "") String programName,
            @WebParam(name = "bid", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<Bid> bid, @WebParam(
                    name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        Bid ret = new Bid();
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(participantID,
                    programName, "DESCRIPTION_PO_getStandingBid"));
            List<DBPEvent> eventList = new ArrayList<DBPEvent>();
            // todo 0313 new method in pm
            List<EventInfo> eventInfos = participantManager
                    .getEventsForParticipant(participantID, false);
            for (EventInfo eventInfo : eventInfos) {
                Event event = _eventManager.getEvent(
                        eventInfo.getProgramName(), eventInfo.getEventName());
                if (event instanceof DBPEvent
                        && event.getProgramName().equals(programName)) {
                    DBPEvent dbpEvent = (DBPEvent) event;
                    eventList.add(dbpEvent);
                    break;
                }
            }

            if (eventList.size() > 0) {
                DBPEvent dbpEvent = eventList.get(0);
                String progName = dbpEvent.getProgramName();
                String eventName = dbpEvent.getEventName();
                List<BidEntry> bidEntries = new ArrayList<BidEntry>();
                String partName = participantManager.getParticipantByAccount(
                        participantID).getUser();
                // todo lin: assume default bid is the standing one
                List<BidEntry> bidEntriesPart = biddingProgramManager
                        .getDefaultBid(progName, partName, false);
                bidEntries.addAll(bidEntriesPart);
                ret = BeanMappingUtil.getBid(progName, eventName,
                        participantID, bidEntries);
            } else {
                ret = null;
            }

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        bid.value = ret;
        returnValue.value = retCode;

    }

    /**
     * This function is used to delete a standing bid.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the ParticipantAccounts that
     * correspond to the Bid being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantID
     *            the participant id
     * @param programName
     *            the program name
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "DeleteStandingBid",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/DeleteStandingBid")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "DeleteStandingBid",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.DeleteStandingBid")
    @ResponseWrapper(
            localName = "DeleteStandingBidResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.DeleteStandingBidResponse")
    public String deleteStandingBid(@WebParam(name = "participantID",
            targetNamespace = "") String participantID, @WebParam(
            name = "programName", targetNamespace = "") String programName) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(participantID,
                    programName, "DESCRIPTION_PO_deleteStandingBid"));
            // todo 0313 new method in pm
            // Add logic here

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to submit a Participants real-time bid for a
     * program. If a real-time bid for the program already exists then this
     * function can be used to modify it.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the ParticipantAccounts that
     * correspond to the Bid being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param bid
     *            the bid
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "SubmitBid",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/SubmitBid")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "SubmitBid",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SubmitBid")
    @ResponseWrapper(
            localName = "SubmitBidResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SubmitBidResponse")
    public String submitBid(
            @WebParam(name = "bid", targetNamespace = "") Bid bid) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(bid,
                    "DESCRIPTION_PO_submitBid"));

            // Add logic here
            // todo 0313 new method in pm

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function returns a Participants real-time bid for a DR event.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the ParticipantAccounts that
     * correspond to the Bid being accessed.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param eventID
     *            the event id
     * @param participantID
     *            the participant id
     * @param bid
     *            the bid
     * @param returnValue
     *            the return value
     * 
     *            returns bid.Bid
     */
    @WebMethod(operationName = "GetBid",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetBid")
    @RequestWrapper(
            localName = "GetBid",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetBid")
    @ResponseWrapper(
            localName = "GetBidResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetBidResponse")
    public void getBid(
            @WebParam(name = "eventID", targetNamespace = "") String eventID,
            @WebParam(name = "participantID", targetNamespace = "") String participantID,
            @WebParam(name = "bid", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<Bid> bid, @WebParam(
                    name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        Bid ret = new Bid();
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(participantID,
                    eventID, "DESCRIPTION_PO_getBid"));

            Event pEvent = _eventManager.getEvent(eventID);
            if (pEvent instanceof DBPEvent) {
                DBPEvent dbpEvent = (DBPEvent) pEvent;
                String partName = participantManager.getParticipantByAccount(
                        participantID).getUser();
                List<BidEntry> bidEntriesPart = biddingProgramManager
                        .getCurrentBid(dbpEvent.getProgramName(), eventID,
                                partName, false);
                ret = BeanMappingUtil.getBid(dbpEvent.getProgramName(),
                        eventID, participantID, bidEntriesPart);
            } else {
                ret = null;
            }

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        bid.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to create an Opt-out state for a Participant.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the ParticipantAccounts that
     * correspond to the OptOutState being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param optOutState
     *            the opt out state
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "CreateOptOutState",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/CreateOptOutState")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "CreateOptOutState",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.CreateOptOutState")
    @ResponseWrapper(
            localName = "CreateOptOutStateResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.CreateOptOutStateResponse")
    public String createOptOutState(@WebParam(name = "optOutState",
            targetNamespace = "") OptOutState optOutState) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(optOutState,
                    "DESCRIPTION_PO_createOptOutState"));
            // TODO lin this is related to Participant.isManualControl() in more
            // generic way
            List<String> params = new ArrayList<String>();
            params.add(optOutState.getDRASClients().getDRASClientID()
                    .toString());
            params.add(optOutState.getParticipantID());
            params.add(optOutState.getEventID());
            params.add(optOutState.getProgramName());
            // todo 0313 new method in pm
            String error = ErrorResourceUtil.getErrorMessage(
                    "ERROR_CREATE_OPTOUTSTATE", params);
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to delete an existing Opt-out state.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the ParticipantAccounts that
     * correspond to the OptOutState being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param optOutStateID
     *            the opt out state id
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "DeleteOptOutState",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/DeleteOptOutState")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "DeleteOptOutState",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.DeleteOptOutState")
    @ResponseWrapper(
            localName = "DeleteOptOutStateResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.DeleteOptOutStateResponse")
    public String deleteOptOutState(@WebParam(name = "optOutStateID",
            targetNamespace = "") String optOutStateID) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(optOutStateID,
                    "DESCRIPTION_PO_deleteOptOutState"));
            // todo 0313 new method in pm
            String error = ErrorResourceUtil.getErrorMessage(
                    "WARN_THIS_OPTOUTSTATE_NOT_EXIST", optOutStateID);
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to fetch the Opt-out states associated with a
     * Participant. There are a number of optional search parameters that can be
     * used to fetch the OptOut states for a Participant.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the ParticipantAccounts that
     * correspond to the OptOutState being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param eventID
     *            the event id
     * @param drasClientID
     *            the dras client id
     * @param optOutID
     *            the opt out id
     * @param participantID
     *            the participant id
     * @param programName
     *            the program name
     * @param optOutStates
     *            the opt out states
     * @param returnValue
     *            the return value
     * 
     *            returns optoutstate.ListOfOptOutStates
     */
    @WebMethod(
            operationName = "GetOptOutStates",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetOptOutStates")
    @RequestWrapper(
            localName = "GetOptOutStates",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetOptOutStates")
    @ResponseWrapper(
            localName = "GetOptOutStatesResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetOptOutStatesResponse")
    public void getOptOutStates(
            @WebParam(name = "participantID", targetNamespace = "") String participantID,
            @WebParam(name = "programName", targetNamespace = "") String programName,
            @WebParam(name = "drasClientID", targetNamespace = "") String drasClientID,
            @WebParam(name = "optOutID", targetNamespace = "") String optOutID,
            @WebParam(name = "eventID", targetNamespace = "") String eventID,
            @WebParam(name = "optOutStates", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfOptOutStates> optOutStates,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        ListOfOptOutStates ret = new ListOfOptOutStates();

        // TODO lin ListOfOptOutStates only contains one OptOutState need to
        // verify
        // todo 0313 new method in pm
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientID,
                    participantID, programName, optOutID, eventID,
                    "DESCRIPTION_PO_getOptOutStates"));

            List<String> params = new ArrayList<String>();
            params.add(drasClientID);
            params.add(participantID);
            params.add(eventID);
            params.add(programName);
            String error = ErrorResourceUtil.getErrorMessage(
                    "WARN_OPTOUTSTATE_NOT_EXIST", params);
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        optOutStates.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is for retrieving a DRAS Clients current communication
     * state. The states can be fetched based upon aa ParticipantAccount
     * identifier, or a Program name. If none of those parameters are specified
     * then the states of all DRAS Clients are returned
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the return values.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participants
     *            the participants
     * @param programNames
     *            the program names
     * @param drasClientStatus
     *            the dras client status
     * @param returnValue
     *            the return value
     * 
     *            returns java.lang.String
     */
    @WebMethod(
            operationName = "GetDRASClientCommsStatus",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDRASClientCommsStatus")
    @RequestWrapper(
            localName = "GetDRASClientCommsStatus",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDRASClientCommsStatus")
    @ResponseWrapper(
            localName = "GetDRASClientCommsStatusResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDRASClientCommsStatusResponse")
    public void getDRASClientCommsStatus(
            @WebParam(name = "participants", targetNamespace = "") ParticipantList participants,
            @WebParam(name = "programNames", targetNamespace = "") ListOfProgramNames programNames,
            @WebParam(name = "DRASClientStatus", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfCommsStatus> drasClientStatus,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        ListOfCommsStatus ret = new ListOfCommsStatus();
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            // todo 0313 new method in pm for each filter lists
            if (participants == null)
                participants = new ParticipantList();
            if (programNames == null)
                programNames = new ListOfProgramNames();
            logEntry.setLongDescr(StringUtil.createLongDesc(participants,
                    programNames, "DESCRIPTION_PO_getDRASClientCommsStatus"));

            List<String> partIdList = null;
            if (participants != null && participants.getAccounts() != null
                    && participants.getAccounts().getParticipantID() != null
                    && participants.getAccounts().getParticipantID().size() > 0) {
                partIdList = participants.getAccounts().getParticipantID();
            }
            List<String> progNameList = programNames.getProgramID();
            List<Participant> partListResult = new ArrayList<Participant>();
            if (programNames != null && programNames.getProgramID() != null
                    && programNames.getProgramID().size() > 0) {
                for (String progName : progNameList) {
                    List<Participant> partList = programParticipantManager
                            .getParticipantsForProgramAsObject(progName);
                    for (Participant part : partList) {
                        if (partIdList != null) {
                            Iterator it = partIdList.iterator();
                            while (it.hasNext()) {
                                String partID = (String) it.next();
                                if (partID.equals(part.getAccountNumber())) {
                                    partListResult.add(part);
                                    it.remove();
                                    break;
                                }
                            }
                        } else {
                            partListResult.add(part);
                        }
                    }
                }
            } else if (partIdList != null) {
                for (String partId : partIdList) {
                    partListResult.add(participantManager
                            .getParticipantByAccount(partId));
                }
            } else {
                partListResult = participantManager.getAllParticipants();
            }

            for (Participant part : partListResult) {
                CommsStatus partStatus = new CommsStatus();
                // TODO lin: not sure if we have dras client id internally, user
                // accountNumber for now.
                partStatus.setDRASClientID(part.getAccountNumber());
                ClientStatus status;
                status = participantManager.getParticipantStatus(
                        part.getParticipantName(), part.isClient());

                String statusStr = "ERRORS";
                if (status != ClientStatus.ONLINE) {
                    statusStr = "OK";
                } else if (status != ClientStatus.OFFLINE) {
                    statusStr = "OFFLINE";
                } else if (status != ClientStatus.ERROR) {
                    statusStr = "ERRORS";
                }
                partStatus.setStatus(statusStr);
                ret.getStatus().add(partStatus);
            }

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        drasClientStatus.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to retrieve any of the transaction logs associated
     * with the DRAS. A number of search keys can be used to specify whcih
     * transactions are retrieved
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the return values.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param timeInterval
     *            the time interval
     * @param participantIDs
     *            the participant i ds
     * @param resultCode
     *            the result code
     * @param userNames
     *            the user names
     * @param methodName
     *            the method name
     * @param drasClientIDs
     *            the dras client i ds
     * @param transactions
     *            the transactions
     * @param returnValue
     *            the return value
     * 
     *            returns logs.ListOfTransactionLogs
     */
    @WebMethod(
            operationName = "GetDRASTransactions",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDRASTransactions")
    @RequestWrapper(
            localName = "GetDRASTransactions",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDRASTransactions")
    @ResponseWrapper(
            localName = "GetDRASTransactionsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDRASTransactionsResponse")
    public void getDRASTransactions(
            @WebParam(name = "userNames", targetNamespace = "") ListOfIDs userNames,
            @WebParam(name = "DRASClientIDs", targetNamespace = "") ListOfIDs drasClientIDs,
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfIDs participantIDs,
            @WebParam(name = "methodName", targetNamespace = "") String methodName,
            @WebParam(name = "timeInterval", targetNamespace = "") DateTimeWindow timeInterval,
            @WebParam(name = "resultCode", targetNamespace = "") String resultCode,
            @WebParam(name = "transactions", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfTransactionLogs> transactions,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        ListOfTransactionLogs ret = new ListOfTransactionLogs();
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            if (userNames == null)
                userNames = new ListOfIDs();
            if (participantIDs == null)
                participantIDs = new ListOfIDs();
            if (drasClientIDs == null)
                drasClientIDs = new ListOfIDs();
            logEntry.setLongDescr(StringUtil.createLongDesc(userNames,
                    drasClientIDs, participantIDs, methodName, timeInterval,
                    resultCode, "DESCRIPTION_PO_getDRASTransactions"));
            FireLogReaderBean firelogReader = new FireLogReaderBean();
            List<String> usernames = null;
            if (userNames != null && userNames.getIdentifier().size() > 0) {
                usernames = userNames.getIdentifier();
            }

            // TODO lin: since input param can't be null, I will take methodName
            // "" as null.
            if (methodName.isEmpty())
                methodName = null;
            if (timeInterval.getStartDateTime() == null) {
                transactions.value = ret;
            }
            Date startTime = timeInterval.getStartDateTime()
                    .toGregorianCalendar().getTime();
            Date endTime = null;

            if (timeInterval.getEndDateTime() != null) {
                endTime = timeInterval.getEndDateTime().toGregorianCalendar()
                        .getTime();
            }

            List<FireLogEntry> logs = firelogReader.searchLog(usernames,
                    methodName, startTime, endTime);
            ret = BeanMappingUtil.getListOfTransactionLogs(logs);
            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        transactions.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to retrieve DRAS Client Alarms that have been
     * logged within the DRAS.
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the return values. Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param timeInterval
     *            the time interval
     * @param participantIDs
     *            the participant i ds
     * @param drasClientIDs
     *            the dras client i ds
     * @param alarms
     *            the alarms
     * @param returnValue
     *            the return value
     * 
     *            returns logs.ListOfDRASClientAlarms
     */
    @WebMethod(
            operationName = "GetDRASClientAlarms",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDRASClientAlarms")
    @RequestWrapper(
            localName = "GetDRASClientAlarms",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDRASClientAlarms")
    @ResponseWrapper(
            localName = "GetDRASClientAlarmsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDRASClientAlarmsResponse")
    public void getDRASClientAlarms(
            @WebParam(name = "DRASClientIDs", targetNamespace = "") ListOfIDs drasClientIDs,
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfIDs participantIDs,
            @WebParam(name = "timeInterval", targetNamespace = "") DateTimeWindow timeInterval,
            @WebParam(name = "alarms", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfDRASClientAlarms> alarms,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        ListOfDRASClientAlarms ret = new ListOfDRASClientAlarms();
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            // todo 0313 new method in pm
            if (drasClientIDs == null)
                drasClientIDs = new ListOfIDs();
            if (participantIDs == null)
                participantIDs = new ListOfIDs();
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientIDs,
                    participantIDs, timeInterval,
                    "DESCRIPTION_PO_getDRASClientAlarms"));
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        alarms.value = ret;
        returnValue.value = retCode;

    }

    /**
     * This function is used to fetch a list of Feedback objects based upon a
     * set of search criteria
     * 
     * For security reasons if the role of the user accessing this method is a
     * Participant Manager then the user credentials of the Participant Manager
     * must match the user credentials on the Participant Accounts that are
     * associated with the return values.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param timeInterval
     *            the time interval
     * @param participantIDs
     *            the participant i ds
     * @param name
     *            the name
     * @param drasClientIDs
     *            the dras client i ds
     * @param programNames
     *            the program names
     * @param feedback
     *            the feedback
     * @param returnValue
     *            the return value
     * 
     *            returns feedback.ListOfFeedback
     */
    @WebMethod(
            operationName = "GetDREventFeedback",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDREventFeedback")
    @RequestWrapper(
            localName = "GetDREventFeedback",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDREventFeedback")
    @ResponseWrapper(
            localName = "GetDREventFeedbackResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDREventFeedbackResponse")
    public void getDREventFeedback(
            @WebParam(name = "DRASClientIDs", targetNamespace = "") ListOfIDs drasClientIDs,
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfIDs participantIDs,
            @WebParam(name = "programNames", targetNamespace = "") ListOfIDs programNames,
            @WebParam(name = "timeInterval", targetNamespace = "") DateTimeWindow timeInterval,
            @WebParam(name = "name", targetNamespace = "") String name,
            @WebParam(name = "feedback", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfFeedback> feedback,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        ListOfFeedback ret = new ListOfFeedback();
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            if (drasClientIDs == null)
                drasClientIDs = new ListOfIDs();
            if (participantIDs == null)
                participantIDs = new ListOfIDs();
            if (programNames == null)
                programNames = new ListOfIDs();
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientIDs,
                    participantIDs, programNames, name, timeInterval,
                    "DESCRIPTION_PO_getDREventFeedback"));
            feedback.value = new ListOfFeedback();
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        feedback.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function puts a DRAS Client into or out of test mode. If a DRAS
     * Client is in test mode then it is essentially off line and will not
     * receive any automated DR signals.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * - DRAS Client Installers
     * 
     * @param drasClientID
     *            the dras client id
     * @param mode
     *            the mode
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "SetTestMode",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/SetTestMode")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "SetTestMode",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SetTestMode")
    @ResponseWrapper(
            localName = "SetTestModeResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SetTestModeResponse")
    public String setTestMode(@WebParam(name = "drasClientID",
            targetNamespace = "") String drasClientID, @WebParam(name = "mode",
            targetNamespace = "") String mode) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientID, mode,
                    "DESCRIPTION_PO_setTestMode"));
            // todo 0313 new method in pm ?
            String error = ErrorResourceUtil.getErrorMessage(
                    "WARN_NOT_SUPPORT_TEST_MODE", drasClientID);
            throw new Exception(error);

        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function sends a manual test message to a DRAS Client and if it is a
     * Simple DRAS Client then it can be used to set the operation mode value
     * and the event status variables. The DRAS Client must be in test mode for
     * this method to work.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * - DRAS Client Installers
     * 
     * @param drasClientID
     *            the dras client id
     * @param opertaionModeValue
     *            the opertaion mode value
     * @param eventStatus
     *            the event status
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "SetTestModeState",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/SetTestModeState")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "SetTestModeState",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SetTestModeState")
    @ResponseWrapper(
            localName = "SetTestModeStateResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.SetTestModeStateResponse")
    public String setTestModeState(
            @WebParam(name = "drasClientID", targetNamespace = "") String drasClientID,
            @WebParam(name = "opertaionModeValue", targetNamespace = "") String opertaionModeValue,
            @WebParam(name = "eventStatus", targetNamespace = "") String eventStatus) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientID,
                    opertaionModeValue, eventStatus,
                    "DESCRIPTION_PO_setTestModeState"));

            String error = ErrorResourceUtil.getErrorMessage(
                    "WARN_NOT_SUPPORT_TEST_MODE", drasClientID);
            throw new Exception(error);
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to get the current operation state of the DRAS
     * Client if it is in test mode.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * - DRAS Client Installers
     * 
     * @param drasClientID
     *            the dras client id
     * @param getTestModeStateResponse
     *            the get test mode state response
     * @param returnValue
     *            the return value
     * 
     *            returns java.lang.String
     */
    @WebMethod(
            operationName = "GetTestModeState",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetTestModeState")
    @RequestWrapper(
            localName = "GetTestModeState",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetTestModeState")
    @ResponseWrapper(
            localName = "GetTestModeStateResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetTestModeStateResponse")
    public void getTestModeState(@WebParam(name = "drasClientID",
            targetNamespace = "") String drasClientID, @WebParam(
            name = "GetTestModeStateResponse", targetNamespace = "",
            mode = WebParam.Mode.OUT) Holder<String> getTestModeStateResponse,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        String ret = new String();
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(drasClientID,
                    "DESCRIPTION_PO_getTestModeState"));

            String error = ErrorResourceUtil.getErrorMessage(
                    "WARN_NOT_SUPPORT_TEST_MODE", drasClientID);
            throw new Exception(error);

        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        getTestModeStateResponse.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to retrieve DRAS Event States that have been
     * created within the DRAS.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param returnValue
     *            the return value
     * @param drasClients
     *            the dras clients
     * @param eventStates
     *            the event states
     * @param eventIDs
     *            the event i ds
     * @param participants
     *            the participants
     * @param programNames
     *            the program names
     */
    @WebMethod(
            operationName = "GetDRASEventStates",
            action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDRASEventStates")
    @RequestWrapper(
            localName = "GetDRASEventStates",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDRASEventStates")
    @ResponseWrapper(
            localName = "GetDRASEventStatesResponse",
            targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/",
            className = "org.openadr.dras.participantoperator.GetDRASEventStatesResponse")
    public void getDRASEventStates(
            @WebParam(name = "eventIDs", targetNamespace = "") ListOfEventIDs eventIDs,
            @WebParam(name = "programNames", targetNamespace = "") ListOfProgramNames programNames,
            @WebParam(name = "participants", targetNamespace = "") ParticipantList participants,
            @WebParam(name = "drasClients", targetNamespace = "") ListOfIDs drasClients,
            @WebParam(name = "eventStates", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfEventStates> eventStates,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        ListOfEventStates ret = new ListOfEventStates();

        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        try {
            if (drasClients == null)
                drasClients = new ListOfIDs();
            if (programNames == null)
                programNames = new ListOfProgramNames();
            if (participants == null)
                participants = new ParticipantList();
            if (eventIDs == null)
                eventIDs = new ListOfEventIDs();
            logEntry.setLongDescr(StringUtil.createLongDesc(eventIDs,
                    programNames, participants, drasClients,
                    "DESCRIPTION_UO_getDRASEventStates"));

            List<String> partNameList = null;
            if (programNames != null && programNames.getProgramID().size() > 0) {
                for (String progName : programNames.getProgramID()) {
                    partNameList = programParticipantManager
                            .getParticipantsForProgram(progName);
                }
            }

            List<String> partNames = new ArrayList<String>();

            if (participants != null && participants.getAccounts() != null
                    && participants.getAccounts().getParticipantID().size() > 0) {
                for (String partId : participants.getAccounts()
                        .getParticipantID()) {

                    Participant pa = participantManager
                            .getParticipantByAccount(partId);
                    boolean add = true;
                    if (partNameList != null) {
                        add = false;
                        for (String partName : partNameList) {
                            if (partName.equalsIgnoreCase(pa.getUser())) {
                                add = true;
                                break;
                            }
                        }
                    }
                    if (!add)
                        continue;
                    if (add)
                        partNames.add(pa.getUser());
                }
            } else {
                partNames = partNameList;
            }

            for (String paName : partNames) {
                List<EventState> eventStateList = clientManager
                        .getClientEventStates(paName, false);
                ListOfEventStates eventStateListOut = BeanMappingUtil
                        .getListOfEventStates(eventStateList);
                for (org.openadr.dras.eventstate.EventState st : eventStateListOut
                        .getEventStates()) {
                    ret.getEventStates().add(st);
                }
            }

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
            retCode = retCode + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        eventStates.value = ret;
        returnValue.value = retCode;

    }

}