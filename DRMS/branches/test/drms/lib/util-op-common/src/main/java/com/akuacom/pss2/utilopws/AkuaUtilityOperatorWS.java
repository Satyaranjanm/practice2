/*
 * www.akuacom.com - Automating Demand Response
 * 
 * com.akuacom.pss2.utilopws.AkuaUtilityOperatorWS.java - Copyright(c)1994 to 2010 by Akuacom . All rights reserved. 
 * Redistribution and use in source and binary forms, with or without modification, is prohibited.
 *
 */
package com.akuacom.pss2.utilopws;

import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import org.apache.log4j.Logger;
import org.jboss.ws.annotation.SchemaValidation;
import org.openadr.dras.akuacontact.ListOfContacts;
import org.openadr.dras.akuadrasclientdata.AkuaDRASSearchHandler;
import org.openadr.dras.akuadrasclientdata.ClientData;
import org.openadr.dras.akuadrasclientdata.ClientDataAttribute;
import org.openadr.dras.akuadrasclientdata.ListOfClientDataAttributes;
import org.openadr.dras.akuadrasclientdata.ListOfIDs;
import org.openadr.dras.akuadrasclientdata.ListofClientData;
import org.openadr.dras.akuaproperty.ListOfProperties;
import org.openadr.dras.akuartpconfig.ListOfRTPConfigs;
import org.openadr.dras.akuaseasonconfig.ListOfSeasonConfigs;
import org.openadr.dras.akuasignal.ListOfSignals;
import org.openadr.dras.akuautilitydrevent.ListOfEventIDs;
import org.openadr.dras.akuautilitydrevent.ListOfUtilityDREvents;
import org.openadr.dras.akuautilitydrevent.UtilityDREvent;
import org.openadr.dras.akuautilityoperator.AkuaUtilityOperator;
import org.openadr.dras.akuautilityprogram.AkuaUtilityProgram;
import org.openadr.dras.akuautilityprogram.AkuaUtilityProgramList;
import org.openadr.dras.participantaccount.ListOfParticipantAccounts;
import org.openadr.dras.utilityprogram.ListOfProgramNames;
import org.openadr.dras.utilityprogram.ParticipantList;

import com.akuacom.ejb.client.EJB3Factory;
import com.akuacom.ejb.search.SearchHandler;
import com.akuacom.pss2.cache.EventStateCacheHelper;
import com.akuacom.pss2.client.ClientManager;
import com.akuacom.pss2.client.ClientManagerBean;
import com.akuacom.pss2.client.ClientManualSignal;
import com.akuacom.pss2.client.ClientStatus;
import com.akuacom.pss2.contact.Contact;
import com.akuacom.pss2.contact.ContactManager;
import com.akuacom.pss2.contact.ContactManagerBean;
import com.akuacom.pss2.core.EJBFactory;
import com.akuacom.pss2.core.ErrorResourceUtil;
import com.akuacom.pss2.core.ProgramEJB;
import com.akuacom.pss2.event.Event;
import com.akuacom.pss2.event.EventManager;
import com.akuacom.pss2.event.EventManagerBean;
import com.akuacom.pss2.event.participant.EventParticipant;
import com.akuacom.pss2.participant.Participant;
import com.akuacom.pss2.participant.ParticipantManager;
import com.akuacom.pss2.participant.ParticipantManagerBean;
import com.akuacom.pss2.program.Program;
import com.akuacom.pss2.program.ProgramManager;
import com.akuacom.pss2.program.ProgramManagerBean;
import com.akuacom.pss2.program.eventtemplate.EventTemplate;
import com.akuacom.pss2.program.participant.ProgramParticipantManager;
import com.akuacom.pss2.program.participant.ProgramParticipantManagerBean;
import com.akuacom.pss2.program.scertp.RTPConfig;
import com.akuacom.pss2.program.scertp.SCERTPProgramManager;
import com.akuacom.pss2.program.scertp.SCERTPProgramManagerBean;
import com.akuacom.pss2.season.SeasonConfig;
import com.akuacom.pss2.signal.SignalDef;
import com.akuacom.pss2.signal.SignalManager;
import com.akuacom.pss2.signal.SignalManagerBean;
import com.akuacom.pss2.subaccount.SubAccount;
import com.akuacom.pss2.system.SystemManager;
import com.akuacom.pss2.system.SystemManagerBean;
import com.akuacom.pss2.system.property.CoreProperty;
import com.akuacom.pss2.system.property.PSS2Properties.PropertyName;
import com.akuacom.pss2.util.EventState;
import com.akuacom.pss2.util.LogUtils;
import com.kanaeki.firelog.util.FireLogEntry;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.1-b03- Generated
 * source version: 2.0
 */
@WebService(name = "AkuaUtilityOperator",
        targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
        wsdlLocation = "WEB-INF/wsdl/AkuaUtilityOperatorWSService.wsdl")
public class AkuaUtilityOperatorWS implements AkuaUtilityOperator {

    /** The Constant log. */
    private static final Logger log = Logger
            .getLogger(AkuaUtilityOperatorWS.class);

    /** The program manager. */
    private EventManager.L eventManager = EJB3Factory
            .getLocalBean(EventManagerBean.class);

    private SCERTPProgramManager.L scertpprogramManager = EJB3Factory
            .getLocalBean(SCERTPProgramManagerBean.class);

    /** The participant manager. */
    private ParticipantManager.L participantManager = EJB3Factory
            .getLocalBean(ParticipantManagerBean.class);

    private ProgramManager.L programManager1 = EJB3Factory
            .getLocalBean(ProgramManagerBean.class);

    private ProgramParticipantManager.L programParticipantManager = EJB3Factory
            .getLocalBean(ProgramParticipantManagerBean.class);

    private SystemManager.L systemManager = EJB3Factory
            .getLocalBean(SystemManagerBean.class);

    private SignalManager.L signalManager = EJB3Factory
            .getLocalBean(SignalManagerBean.class);

    private ContactManager.L contactManager = EJB3Factory
            .getLocalBean(ContactManagerBean.class);
    private ClientManager.L clientManager = EJB3Factory
            .getLocalBean(ClientManagerBean.class);

    public AkuaUtilityOperatorWS() {
    }

    /**
     * Gets the participant list.
     * 
     * @param participants
     *            the participants
     * @param programNames
     *            the program names
     * 
     * @return the participant list
     */
    private List<Participant> getParticipantList(ParticipantList participants,
            ListOfProgramNames programNames) {
        List<String> partIdList = null;
        if (participants != null && participants.getAccounts() != null
                && participants.getAccounts().getParticipantID() != null
                && participants.getAccounts().getParticipantID().size() > 0) {
            partIdList = participants.getAccounts().getParticipantID();
        }

        List<Participant> partListResult = new ArrayList<Participant>();
        if (programNames != null && programNames.getProgramID() != null
                && programNames.getProgramID().size() > 0) {
            List<String> progNameList = programNames.getProgramID();
            for (String progName : progNameList) {
                List<Participant> partList = programParticipantManager
                        .getParticipantsForProgramAsObject(progName);
                for (Participant part : partList) {
                    if (partIdList != null) {
                        Iterator<String> it = partIdList.iterator();
                        while (it.hasNext()) {
                            String partID = (String) it.next();
                            if (partID.equals(part.getAccountNumber())) {
                                partListResult.add(part);
                                it.remove();
                                break;
                            }
                        }
                    } else {
                        partListResult.add(part);
                    }
                }
            }
        } else if (partIdList != null) {
            for (String partId : partIdList) {
                partListResult.add(participantManager
                        .getParticipantByAccount(partId));
            }
        } else {
            for (Participant part : participantManager.getAllParticipants()) {
                partListResult.add(participantManager.getParticipant(
                        part.getParticipantName(), part.isClient()));
            }
        }

        return partListResult;
    }

    /**
     * Gets the participant account list.
     * 
     * @param participants
     *            the participants
     * @param programNames
     *            the program names
     * 
     * @return the participant account list
     * 
     * @throws Exception
     *             the exception
     */
    private List<String> getParticipantAccountList(
            ParticipantList participants, ListOfProgramNames programNames)
            throws Exception {
        List<String> partIdList = null;
        if (participants != null && participants.getAccounts() != null
                && participants.getAccounts().getParticipantID() != null
                && participants.getAccounts().getParticipantID().size() > 0) {
            partIdList = participants.getAccounts().getParticipantID();
        }

        List<String> partIdListResult = new ArrayList<String>();
        if (programNames != null && programNames.getProgramID() != null
                && programNames.getProgramID().size() > 0) {
            List<String> progNameList = programNames.getProgramID();
            for (String progName : progNameList) {
                List<Participant> partList = participantManager
                        .findParticipantsByProgramName(progName);

                for (Participant part : partList) {
                    if (partIdList != null) {
                        Iterator<String> it = partIdList.iterator();
                        while (it.hasNext()) {
                            String partID = (String) it.next();
                            if (partID.equals(part.getAccountNumber())) {
                                partIdListResult.add(partID);
                                it.remove();
                                break;
                            }
                        }
                    } else {
                        partIdListResult.add(part.getAccountNumber());
                    }
                }
            }
        } else if (partIdList != null) {
            for (String partId : partIdList) {
                partIdListResult.add(partId);
            }
        } else {
            for (Participant part : participantManager.getAllParticipants()) {
                partIdListResult.add(part.getAccountNumber());
            }
        }

        return partIdListResult;
    }

    /**
     * Gets the dras client data.
     * 
     * @param participants
     *            the participants
     * @param programName
     *            the program name
     * @param clientDataRet
     *            the client data ret
     * @param returnValue
     *            the return value
     * 
     *            returns akuadrasclientdata.ListofClientData
     */
    @WebMethod(
            operationName = "GetDRASClientData",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/GetDRASClientData")
    @RequestWrapper(
            localName = "GetDRASClientData",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetDRASClientData")
    @ResponseWrapper(
            localName = "GetDRASClientDataResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetDRASClientDataResponse")
    public void getDRASClientData(
            @WebParam(name = "participants", targetNamespace = "") org.openadr.dras.utilityprogram.ParticipantList participants,
            @WebParam(name = "programName", targetNamespace = "") org.openadr.dras.utilityprogram.ListOfProgramNames programName,
            @WebParam(name = "clientData", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<org.openadr.dras.akuadrasclientdata.ListofClientData> clientDataRet,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {

        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        ListofClientData ret = new ListofClientData();
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(
                    new ParticipantList(), new ListOfProgramNames(),
                    "DESCRIPTION_UO_getDRASClientData"));
            logEntry.setDescription("SUCCESS");

            List<String> partIdList = null;
            partIdList = this.getParticipantAccountList(participants,
                    programName);

            // PERF_COMMENT This is called by participant list page refreshing.
            if (partIdList != null && partIdList.size() > 0) {
                List<Participant> parts = participantManager
                        .getParticipantsByAccounts(partIdList); // todo:
                                                                 // participantUUID

                // TODO the following part should be replaced with entity bean
                // implementation
                List<String> partNameList = new ArrayList<String>();
                // assume this is either for participant list or client list
                boolean isClient = false;
                for (Participant part : parts) {
                    partNameList.add(part.getParticipantName());
                    isClient = part.isClient();
                }
                List<EventParticipant> partEvents;
                partEvents = participantManager
                        .getEventParticipantsByPartNames(partNameList,
                                isClient);

                for (Participant part : parts) {
                    ClientData clientData = new ClientData();
                    clientData.setClientID(part.getAccountNumber());

                    if (part.isManualControl()) // TODO tune later on manual
                                                // control case
                    {
                        if (part.getManualSignals() != null) {
                            for (ClientManualSignal cms : part
                                    .getManualSignals()) {
                                if (cms == null) {
                                    continue;
                                }
                                if ("pending".equals(cms.getName())) {
                                    clientData.setPending(cms.getValue());
                                }
                                if ("mode".equals(cms.getName())) {
                                    clientData.setMode(cms.getValue());
                                }
                            }
                        }
                    } else {

                        SignalDef sigPending = signalManager
                                .findSignal("pending");
                        SignalDef modPending = signalManager.findSignal("mode");

                        if (partEvents != null && partEvents.size() > 0) {
                            boolean findMatch = false;
                            for (EventParticipant ePart : partEvents) {
                                if (ePart
                                        .getParticipant()
                                        .getParticipantName()
                                        .equalsIgnoreCase(
                                                part.getParticipantName())
                                        && ePart.getParticipant()
                                                .getManualSignals() != null) {
                                    for (ClientManualSignal cms : ePart
                                            .getParticipant()
                                            .getManualSignals()) {
                                        if (cms == null) {
                                            continue;
                                        }
                                        if ("pending".equals(cms.getName())) {
                                            clientData.setPending(cms
                                                    .getValue());
                                        }
                                        if ("mode".equals(cms.getName())) {
                                            clientData.setMode(cms.getValue());
                                        }
                                        findMatch = true;
                                    }
                                }
                            }
                            if (!findMatch) {
                                clientData.setPending(BeanMappingUtil
                                        .getSignalString(sigPending));
                                clientData.setMode(BeanMappingUtil
                                        .getSignalString(modPending));
                            }
                        } else {
                            clientData.setPending(BeanMappingUtil
                                    .getSignalString(sigPending));
                            clientData.setMode(BeanMappingUtil
                                    .getSignalString(modPending));
                        }
                    }

                    // last contact
                    Date lastContact = part.getCommTime();

                    clientData.setLastContact(BeanMappingUtil.getLatestContact(
                            lastContact, false));

                    clientData.setAveShedPerHour(part.getShedPerHourKW());

                    // status
                    ClientStatus status = ClientStatus.values()[part
                            .getStatus()];
                    // eventManager.getParticipantStatus(part.getParticipantName());
                    String statusStr = "ERRORS";
                    if (status == ClientStatus.ONLINE) {
                        statusStr = "OK";
                    } else if (status == ClientStatus.OFFLINE) {
                        statusStr = "OFFLINE";
                    } else if (status == ClientStatus.ERROR) {
                        statusStr = "ERRORS";
                    }
                    clientData.setStatus(statusStr);

                    clientData.setMySiteURL("../facdash?user="
                            + part.getParticipantName());
                    clientData
                            .setGraphURL("../pss2.website/usages.do?userName="
                                    + part.getParticipantName());

                    clientData.setParam1(Double.toString(part.getLatitude()));
                    clientData.setParam2(Double.toString(part.getLongitude()));

                    clientData.setParam3(part.getTypeString());

                    // get clients string
                    ListOfClientDataAttributes list = new ListOfClientDataAttributes();
                    if (!part.isClient()) {
                        List<String> clients = participantManager
                                .getClientNamesByParticipant(part
                                        .getParticipantName());
                        if (clients != null && clients.size() > 0) {
                            ClientDataAttribute clientsAtt = new ClientDataAttribute();
                            StringBuilder names = null;
                            for (String ci : clients) {
                                if (names == null) {
                                    names = new StringBuilder();
                                } else {
                                    names.append(",");
                                }
                                names.append(ci);
                            }
                            clientsAtt.setName("CLIENT_NAMES");
                            clientsAtt.setValue(names.toString());

                            list.getClientDataAttributeList().add(clientsAtt);
                            clientData.setClientDataAttributeList(list);
                        }
                    }

                    // get sub accounts string
                    List<SubAccount> accounts = participantManager
                            .getSubAccounts(part.getParticipantName());
                    if (accounts != null && accounts.size() > 0) {
                        ClientDataAttribute accsAtt = new ClientDataAttribute();
                        StringBuilder names = null;
                        for (SubAccount ci : accounts) {
                            if (names == null) {
                                names = new StringBuilder();
                            } else {
                                names.append(",");
                            }
                            names.append(ci.getSubAccountId());
                        }
                        accsAtt.setName("SUBACCOUNTS_NAMES");
                        accsAtt.setValue(names.toString());
                        list.getClientDataAttributeList().add(accsAtt);
                        clientData.setClientDataAttributeList(list);
                    }

                    // get participant string for client
                    if (part.isClient()) {
                        String parentName = clientManager.getClientOnly(
                                part.getParticipantName()).getParent();
                        if (parentName != null && !parentName.isEmpty()) {
                            ClientDataAttribute partNameAtt = new ClientDataAttribute();

                            partNameAtt.setName("CLIENT_PARTICIPANT_NAME");
                            partNameAtt.setValue(parentName);
                            list.getClientDataAttributeList().add(partNameAtt);
                            clientData.setClientDataAttributeList(list);
                        }
                    }

                    ret.getData().add(clientData);
                }
            } else {
                // PERF_COMMENT TODO tune later
                for (Participant part : getParticipantList(participants,
                        programName)) {
                    ClientData clientData = new ClientData();
                    clientData.setClientID(part.getAccountNumber());
                    List<EventState> clientEventStates = clientManager.getClientEventStates(part);
                    clientData.setPending(EventState.loadEventStatus(clientEventStates.get(0).getEventStatus()));
                    clientData.setMode(clientEventStates.get(0).getOperationModeValue().toString());

                    // last contact
                    final Date lastContact = participantManager.getParticipant(
                            part.getParticipantName(), part.isClient())
                            .getCommTime();
                    clientData.setLastContact(BeanMappingUtil.getLatestContact(
                            lastContact, false));

                    clientData.setAveShedPerHour(part.getShedPerHourKW());

                    // status
                    ClientStatus status = participantManager
                            .getParticipantStatus(part.getParticipantName(),
                                    part.isClient());
                    String statusStr = "ERRORS";
                    if (status == ClientStatus.ONLINE) {
                        statusStr = "OK";
                    } else if (status == ClientStatus.OFFLINE) {
                        statusStr = "OFFLINE";
                    } else if (status == ClientStatus.ERROR) {
                        statusStr = "ERRORS";
                    }
                    clientData.setStatus(statusStr);

                    clientData.setMySiteURL("../pss2.website/mysite.do?user="
                            + part.getParticipantName());
                    clientData
                            .setGraphURL("../pss2.website/usages.do?userName="
                                    + part.getParticipantName());

                    clientData.setParam1(Double.toString(part.getLatitude()));
                    clientData.setParam2(Double.toString(part.getLongitude()));

                    clientData.setParam3(part.getTypeString());

                    // TODO: add client data call from data service here.
                }
            }
            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        // return ret;
        clientDataRet.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to create a new DR program.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param program
     *            the program
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "CreateProgram",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/CreateProgram")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "CreateProgram",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.CreateProgram")
    @ResponseWrapper(
            localName = "CreateProgramResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.CreateProgramResponse")
    public String createProgram(@WebParam(name = "program",
            targetNamespace = "") AkuaUtilityProgram program) {
        String retCode = "FAILURE: ";

        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);

        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(program,
                    "DESCRIPTION_UO_createProgram"));
            if (program == null) {
                String error = ErrorResourceUtil
                        .getErrorMessage("ERROR_CREATE_PROGRAM_EMPTY_INPUT");
                throw new Exception(error);
            }
            program.setName(URLDecoder.decode(program.getName()));
            program.setUtiltyProgramName(URLDecoder.decode(program
                    .getUtiltyProgramName()));
            Program prog = programManager1.getProgram(program.getName());
            if (prog != null) {
                List<String> parameters = new ArrayList<String>();
                parameters.add(prog.getProgramName());
                String error = ErrorResourceUtil.getErrorMessage(
                        "ERROR_CREATE_PROGRAM_ALREADY_EXIST", parameters);
                throw new Exception(error);
            }

            final Class<?> clazz = Class.forName(program.getClassName());
            final ProgramEJB.L programEJB = (ProgramEJB.L) EJBFactory
                    .getBean(clazz);
            prog = programEJB.createProgramObject();
            BeanMappingUtil.populateProgram(prog, program);
            prog.setState(Program.PROGRAM_ACTIVE);
            // TODO: set validatorConfigFile and ProgramType
            programManager1.createProgram(prog);
            List<String> parameters = new ArrayList<String>();
            parameters.add(prog.getProgramName());
            String message = ErrorResourceUtil.getErrorMessage(
                    "INFO_PROGRAM_CREATE", parameters);
            logEntry.setDescription(message);
            retCode = "SUCCESS";
            // TODO lin: add log for successful scenario for all operators
        } catch (Exception e) {
            String message = e.getMessage();
            if (message == null) {
                List<String> parameters = new ArrayList<String>();
                parameters.add("createProgram");
                message = ErrorResourceUtil.getErrorMessage(
                        "ERROR_INTERNAL_ERROR", parameters);
            }
            logEntry.setDescription(message);
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + message;
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to get list of akua programs.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param programs
     *            the programs
     * @param returnValue
     *            the return value
     * @param programNames
     *            the program names
     */
    @WebMethod(
            operationName = "GetPrograms",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/GetPrograms")
    @RequestWrapper(
            localName = "GetPrograms",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetPrograms")
    @ResponseWrapper(
            localName = "GetProgramsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetProgramsResponse")
    public void getPrograms(
            @WebParam(name = "programNames", targetNamespace = "") ListOfProgramNames programNames,
            @WebParam(name = "programs", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<AkuaUtilityProgramList> programs,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {

        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        AkuaUtilityProgramList ret = new AkuaUtilityProgramList();
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(programNames,
                    "DESCRIPTION_UO_getPrograms"));
            logEntry.setDescription("SUCCESS");
            List<String> names = programNames.getProgramID();
            for (String name : names) {
                Program prog = programManager1.getProgram(name);
                if (prog == null) {
                    List<String> parameters = new ArrayList<String>();
                    parameters.add(name);
                    String error = ErrorResourceUtil.getErrorMessage(
                            "ERROR_GET_PROGRAM_NOT_EXIST", parameters);
                    throw new Exception(error);
                }
                AkuaUtilityProgram aProg = BeanMappingUtil
                        .getAkuaUtilityProgram(prog);

                ret.getProgram().add(aProg);
            }
            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        // return ret;
        programs.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to update an Akua program.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param program
     *            the program
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "UpdateProgram",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/UpdateProgram")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "UpdateProgram",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateProgram")
    @ResponseWrapper(
            localName = "UpdateProgramResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateProgramResponse")
    public String updateProgram(@WebParam(name = "program",
            targetNamespace = "") AkuaUtilityProgram program) {
        String retCode = "FAILURE: ";

        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);

        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(program,
                    "DESCRIPTION_UO_updateProgram"));
            if (program == null) {
                String error = ErrorResourceUtil
                        .getErrorMessage("ERROR_UPDATE_PROGRAM_EMPTY_INPUT");
                throw new Exception(error);
            }
            program.setName(URLDecoder.decode(program.getName()));
            program.setUtiltyProgramName(URLDecoder.decode(program
                    .getUtiltyProgramName()));
            Program prog = programManager1.getProgram(program.getName());
            if (prog == null) {
                List<String> parameters = new ArrayList<String>();
                parameters.add(program.getName());
                String error = ErrorResourceUtil.getErrorMessage(
                        "ERROR_UPDATE_PROGRAM_NOT_EXIST", parameters);
                throw new Exception(error);
            }
            
            BeanMappingUtil.populateProgram(prog, program);
            programManager1.updateProgram(prog);
            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * Search dras participants.
     * 
     * @param participantAccounts
     *            the participant accounts
     * @param returnValue
     *            the return value
     * @param searchHandler
     *            the search handler
     * @param programNames
     *            the program names
     */
    @WebMethod(
            operationName = "SearchDRASParticipants",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/SearchDRASParticipants")
    @RequestWrapper(
            localName = "SearchDRASParticipants",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.SearchDRASParticipants")
    @ResponseWrapper(
            localName = "SearchDRASParticipantsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.SearchDRASParticipantsResponse")
    public void searchDRASParticipants(
            @WebParam(name = "searchHandler", targetNamespace = "",
                    mode = WebParam.Mode.INOUT) Holder<AkuaDRASSearchHandler> searchHandler,
            @WebParam(name = "programNames", targetNamespace = "") ListOfProgramNames programNames,
            @WebParam(name = "participantAccounts", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfParticipantAccounts> participantAccounts,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        ListOfParticipantAccounts ret = new ListOfParticipantAccounts();
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(programNames,
                    "DESCRIPTION_UO_searchDRASParticipants"));
            logEntry.setDescription("SUCCESS");
            List<String> names = programNames.getProgramID();
            AkuaDRASSearchHandler drasHander = searchHandler.value;
            SearchHandler sh = BeanMappingUtil.getSearchHandler(drasHander);

            sh = participantManager.searchParticipants(names, sh);
            List<Participant> partList = (List<Participant>) sh.getResults();
            ret = BeanMappingUtil.getParticipantAccountList(partList);
            drasHander = BeanMappingUtil.getAkuaDRASSearchHandler(sh);
            searchHandler.value = drasHander;
            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        // return ret;
        participantAccounts.value = ret;
        returnValue.value = retCode;
    }

    /**
     * Search dras client data.
     * 
     * @param clientDataList
     *            the client data list
     * @param participantIDs
     *            the participant i ds
     * @param returnValue
     *            the return value
     * @param searchHandler
     *            the search handler
     * @param programNames
     *            the program names
     */
    @WebMethod(
            operationName = "SearchDRASClientData",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/SearchDRASClientData")
    @RequestWrapper(
            localName = "SearchDRASClientData",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.SearchDRASClientData")
    @ResponseWrapper(
            localName = "SearchDRASClientDataResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.SearchDRASClientDataResponse")
    public void searchDRASClientData(
            @WebParam(name = "searchHandler", targetNamespace = "",
                    mode = WebParam.Mode.INOUT) Holder<AkuaDRASSearchHandler> searchHandler,
            @WebParam(name = "programNames", targetNamespace = "") ListOfProgramNames programNames,
            @WebParam(name = "participantIDs", targetNamespace = "") ListOfIDs participantIDs,
            @WebParam(name = "clientDataList", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListofClientData> clientDataList,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        ListofClientData ret = new ListofClientData();
        try {
            logEntry.setLongDescr(StringUtil.createLongDesc(programNames,
                    "DESCRIPTION_UO_searchDRASClientData"));
            logEntry.setDescription("SUCCESS");
            List<String> names = programNames.getProgramID();
            AkuaDRASSearchHandler drasHander = searchHandler.value;
            SearchHandler sh = BeanMappingUtil.getSearchHandler(drasHander);
            List<String> accounts = participantIDs.getId();
            sh = participantManager.searchParticipants(names, accounts, sh);
            List<Participant> partList = (List<Participant>) sh.getResults();
            ret = BeanMappingUtil.getClientDataList(partList);
            drasHander = BeanMappingUtil.getAkuaDRASSearchHandler(sh);
            searchHandler.value = drasHander;
            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        // return ret;
        clientDataList.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to create a new akua EventTemplate.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param eventTemplate
     *            the event template
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "CreateEventTemplate",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/CreateEventTemplate")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "CreateEventTemplate",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.CreateEventTemplate")
    @ResponseWrapper(
            localName = "CreateEventTemplateResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.CreateEventTemplateResponse")
    public String createEventTemplate(@WebParam(name = "EventTemplate",
            targetNamespace = "") UtilityDREvent eventTemplate) {
        String retCode = "FAILURE: ";

        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);

        try {
            // logEntry.setLongDescr(StringUtil.createLongDesc(eventTemplate,
            // "DESCRIPTION_UO_createProgram"));
            logEntry.setLongDescr("DESCRIPTION_UO_createProgram");
            if (eventTemplate == null) {
                String error = ErrorResourceUtil
                        .getErrorMessage("ERROR_CREATE_EVENT_TEMPLATE_EMPTY_INPUT");
                throw new Exception(error);
            }
            EventTemplate prog = eventManager.getEventTemplate(eventTemplate
                    .getProgramName());
            if (prog != null) {
                List<String> parameters = new ArrayList<String>();
                parameters.add(prog.getProgramName());
                String error = ErrorResourceUtil
                        .getErrorMessage(
                                "ERROR_CREATE_EVENT_TEMPLATE_ALREADY_EXIST",
                                parameters);
                throw new Exception(error);
            }

            eventManager.createEventTemplate(eventTemplate);

            retCode = "SUCCESS";
        } catch (Exception e) {
            String message = e.getMessage();
            if (message == null) {
                List<String> parameters = new ArrayList<String>();
                parameters.add("createEventTemplate");
                message = ErrorResourceUtil.getErrorMessage(
                        "ERROR_INTERNAL_ERROR", parameters);
            }
            logEntry.setDescription(message);
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + message;
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;

    }

    /**
     * This function is used to get list of akua EventTemplates.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param eventTemplates
     *            the event templates
     * @param returnValue
     *            the return value
     * @param eventTemplateNames
     *            the event template names
     * @param programName
     *            the program name
     */
    @WebMethod(
            operationName = "GetEventTemplates",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/GetEventTemplates")
    @RequestWrapper(
            localName = "GetEventTemplates",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetEventTemplates")
    @ResponseWrapper(
            localName = "GetEventTemplatesResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetEventTemplatesResponse")
    public void getEventTemplates(
            @WebParam(name = "programName", targetNamespace = "") String programName,
            @WebParam(name = "eventTemplateNames", targetNamespace = "") ListOfEventIDs eventTemplateNames,
            @WebParam(name = "eventTemplates", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfUtilityDREvents> eventTemplates,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        ListOfUtilityDREvents ret = new ListOfUtilityDREvents();
        try {
            logEntry.setLongDescr("DESCRIPTION_UO_getPrograms");
            logEntry.setDescription("SUCCESS");

            EventTemplate template = eventManager.getEventTemplate(programName);

            UtilityDREvent event = BeanMappingUtil.getUtilityDREvent(template);
            if (event != null) {
                ret.getDREvent().add(event);
            }
            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        // return ret;
        eventTemplates.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to update an Akua EventTemplate.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param eventTemplate
     *            the event template
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "UpdateEventTemplate",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/UpdateEventTemplate")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "UpdateEventTemplate",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateEventTemplate")
    @ResponseWrapper(
            localName = "UpdateEventTemplateResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateEventTemplateResponse")
    public String updateEventTemplate(@WebParam(name = "eventTemplate",
            targetNamespace = "") UtilityDREvent eventTemplate) {
        String retCode = "FAILURE: ";

        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);

        try {
            // logEntry.setLongDescr(StringUtil.createLongDesc(eventTemplate,
            // "DESCRIPTION_UO_createProgram"));
            logEntry.setLongDescr("DESCRIPTION_UO_createProgram");
            if (eventTemplate == null) {
                String error = ErrorResourceUtil
                        .getErrorMessage("ERROR_CREATE_EVENT_TEMPLATE_EMPTY_INPUT");
                throw new Exception(error);
            }

            EventTemplate et = eventManager.getEventTemplate(eventTemplate
                    .getProgramName());
            if (et == null) {
                eventManager.createEventTemplate(eventTemplate);
            } else {
                eventManager.updateEventTemplate(eventTemplate);
            }

            retCode = "SUCCESS";
        } catch (Exception e) {
            String message = e.getMessage();
            if (message == null) {
                List<String> parameters = new ArrayList<String>();
                parameters.add("createEventTemplate");
                message = ErrorResourceUtil.getErrorMessage(
                        "ERROR_INTERNAL_ERROR", parameters);
            }
            logEntry.setDescription(message);
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + message;
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to get list of akua DREvents.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param drEvents
     *            the dr events
     * @param drEventNames
     *            the dr event names
     * @param returnValue
     *            the return value
     * @param programName
     *            the program name
     */
    @WebMethod(
            operationName = "GetDREvents",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/GetDREvents")
    @RequestWrapper(
            localName = "GetDREvents",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetDREvents")
    @ResponseWrapper(
            localName = "GetDREventsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetDREventsResponse")
    public void getDREvents(
            @WebParam(name = "programName", targetNamespace = "") String programName,
            @WebParam(name = "DREventNames", targetNamespace = "") ListOfEventIDs drEventNames,
            @WebParam(name = "DREvents", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfUtilityDREvents> drEvents,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        ListOfUtilityDREvents ret = new ListOfUtilityDREvents();
        try {
            logEntry.setLongDescr("DESCRIPTION_UO_getPrograms");
            logEntry.setDescription("SUCCESS");

            // todo only support get by event name at this moment.

            if (drEventNames != null && drEventNames.getEventID() != null
                    && drEventNames.getEventID().size() > 0) {
                String eventName = drEventNames.getEventID().get(0);
                Event event = eventManager.getEventWithParticipantsAndSignals(eventName);

                UtilityDREvent drevent = BeanMappingUtil
                        .getAkuaUtilityDREvent(event);
                if (drevent != null) {
                    ret.getDREvent().add(drevent);
                }
                retCode = "SUCCESS";
            }
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        // return ret;
        drEvents.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to list of akua Signals.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param returnValue
     *            the return value
     * @param programName
     *            the program name
     * @param signals
     *            the signals
     */
    @WebMethod(
            operationName = "GetSignals",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/GetSignals")
    @RequestWrapper(
            localName = "GetSignals",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetSignals")
    @ResponseWrapper(
            localName = "GetSignalsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetSignalsResponse")
    public void getSignals(
            @WebParam(name = "programName", targetNamespace = "") String programName,
            @WebParam(name = "signals", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfSignals> signals,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        ListOfSignals ret = new ListOfSignals();
        try {
            logEntry.setLongDescr("DESCRIPTION_UO_getSignals");
            logEntry.setDescription("SUCCESS");
            List<SignalDef> sigs = new ArrayList<SignalDef>();
            if (programName == null || programName.isEmpty()) {
                sigs = signalManager.findSignals();
            } else {
                sigs = programManager1.findSignals(programName);
            }

            ret = BeanMappingUtil.getSignalList(sigs);

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        signals.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to update list of akua Signals.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param signals
     *            the signals
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "UpdateSignals",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/UpdateSignals")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "UpdateSignals",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateSignals")
    @ResponseWrapper(
            localName = "UpdateSignalsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateSignalsResponse")
    public String updateSignals(@WebParam(name = "signals",
            targetNamespace = "") ListOfSignals signals) {
        String retCode = "FAILURE: ";

        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);

        try {
            logEntry.setLongDescr("DESCRIPTION_UO_updateProperties");

            List<SignalDef> list = BeanMappingUtil.getSignalList(signals);

            signalManager.saveSignals(list);
            retCode = "SUCCESS";
        } catch (Exception e) {
            String message = e.getMessage();
            if (message == null) {
                List<String> parameters = new ArrayList<String>();
                parameters.add("updateContacts");
                message = ErrorResourceUtil.getErrorMessage(
                        "ERROR_INTERNAL_ERROR", parameters);
            }
            logEntry.setDescription(message);
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + message;
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;

    }

    /**
     * This function is used to list of akua Contacts.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param returnValue
     *            the return value
     * @param ownerType
     *            the owner type
     * @param ownerID
     *            the owner id
     * @param contacts
     *            the contacts
     */
    @WebMethod(
            operationName = "GetContacts",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/GetContacts")
    @RequestWrapper(
            localName = "GetContacts",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetContacts")
    @ResponseWrapper(
            localName = "GetContactsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetContactsResponse")
    public void getContacts(
            @WebParam(name = "ownerType", targetNamespace = "") String ownerType,
            @WebParam(name = "ownerID", targetNamespace = "") String ownerID,
            @WebParam(name = "contacts", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfContacts> contacts,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        ListOfContacts ret = new ListOfContacts();
        try {
            logEntry.setLongDescr("DESCRIPTION_UO_getContactss");
            logEntry.setDescription("SUCCESS");

            if (ownerType.equalsIgnoreCase(Contact.CONTACT_OWNER_TYPE_GLOBAL)) {
                List<Contact> contactList = contactManager.findCoreContacts();
                ret = BeanMappingUtil.getContactList(contactList);
            }
            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        // return ret;
        contacts.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to update list of akua Contacts.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param contacts
     *            the contacts
     * @param ownerType
     *            the owner type
     * @param ownerID
     *            the owner id
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "UpdateContacts",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/UpdateContacts")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "UpdateContacts",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateContacts")
    @ResponseWrapper(
            localName = "UpdateContactsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateContactsResponse")
    public String updateContacts(@WebParam(name = "ownerType",
            targetNamespace = "") String ownerType, @WebParam(name = "ownerID",
            targetNamespace = "") String ownerID, @WebParam(name = "contacts",
            targetNamespace = "") ListOfContacts contacts) {
        String retCode = "FAILURE: ";

        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);

        try {
            logEntry.setLongDescr("DESCRIPTION_UO_updateContacts");
            EventStateCacheHelper cache = EventStateCacheHelper.getInstance();
            List<Contact> contactList = BeanMappingUtil
                    .getContactList(contacts);
            if (ownerType.equalsIgnoreCase("GLOBAL")) {
                contactManager.updateCoreContacts(contactList);
            } else if (ownerType.equalsIgnoreCase("PROGRAM")) {
                contactManager.updateCoreContacts(contactList);
            } else if (ownerType.equalsIgnoreCase("PARTICIPANT")) {
                contactManager.updateCoreContacts(contactList);
            } else if (ownerType.equalsIgnoreCase("CLIENT")) {
                contactManager.updateCoreContacts(contactList);
            }
            cache.setEscacheforoperatorcontacts("OperatorContacts",contactManager.getOperatorContacts());
            retCode = "SUCCESS";
        } catch (Exception e) {
            String message = e.getMessage();
            if (message == null) {
                List<String> parameters = new ArrayList<String>();
                parameters.add("updateContacts");
                message = ErrorResourceUtil.getErrorMessage(
                        "ERROR_INTERNAL_ERROR", parameters);
            }
            logEntry.setDescription(message);
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + message;
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to list of akua Properties.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param returnValue
     *            the return value
     * @param empty
     *            the empty
     * @param properties
     *            the properties
     */
    @WebMethod(
            operationName = "GetProperties",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/GetProperties")
    @RequestWrapper(
            localName = "GetProperties",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetProperties")
    @ResponseWrapper(
            localName = "GetPropertiesResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetPropertiesResponse")
    public void getProperties(
            @WebParam(name = "empty", targetNamespace = "") Object empty,
            @WebParam(name = "properties", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfProperties> properties,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        ListOfProperties ret = new ListOfProperties();
        try {
            logEntry.setLongDescr("DESCRIPTION_UO_getProperties");
            logEntry.setDescription("SUCCESS");
            List<CoreProperty> propList = systemManager.getAllProperties();
            Collections.sort(propList, PROPERY_NAME_ORDER_ASEND);
            ret = BeanMappingUtil.getPropertyList(propList);

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        // return ret;
        properties.value = ret;
        returnValue.value = retCode;
    }
    
    static final Comparator<CoreProperty> PROPERY_NAME_ORDER_ASEND = 
	            new Comparator<CoreProperty>() {
		public int compare(CoreProperty e1, CoreProperty e2) {
			return e1.getPropertyName().compareToIgnoreCase(e2.getPropertyName());
		}
    };

    /**
     * This function is used to update list of akua Properties.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param properties
     *            the properties
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "UpdateProperties",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/UpdateProperties")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "UpdateProperties",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateProperties")
    @ResponseWrapper(
            localName = "UpdatePropertiesResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdatePropertiesResponse")
    public String updateProperties(@WebParam(name = "properties",
            targetNamespace = "") ListOfProperties properties) {
        String retCode = "FAILURE: ";

        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);

        try {
            logEntry.setLongDescr("DESCRIPTION_UO_updateProperties");

            Set<CoreProperty> propList = BeanMappingUtil
                    .getPropertyList(properties);

            for (CoreProperty prop : propList) {
                systemManager.setProperty(prop);
            }
            retCode = "SUCCESS";
                EventStateCacheHelper.getInstance().setSupressAllEmail(systemManager.getPss2Properties().isSuppressAllEmails());
        } catch (Exception e) {
            String message = e.getMessage();
            if (message == null) {
                List<String> parameters = new ArrayList<String>();
                parameters.add("updateContacts");
                message = ErrorResourceUtil.getErrorMessage(
                        "ERROR_INTERNAL_ERROR", parameters);
            }
            logEntry.setDescription(message);
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + message;
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to list of akua RTPConfigs.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param rtpConfigTable
     *            the rtp config table
     * @param returnValue
     *            the return value
     * @param programName
     *            the program name
     */
    @WebMethod(
            operationName = "GetRTPConfigs",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/GetRTPConfigs")
    @RequestWrapper(
            localName = "GetRTPConfigs",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetRTPConfigs")
    @ResponseWrapper(
            localName = "GetRTPConfigsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetRTPConfigsResponse")
    public void getRTPConfigs(@WebParam(name = "programName",
            targetNamespace = "") String programName, @WebParam(
            name = "rtpConfigTable", targetNamespace = "",
            mode = WebParam.Mode.OUT) Holder<ListOfRTPConfigs> rtpConfigTable,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        ListOfRTPConfigs ret = new ListOfRTPConfigs();
        try {
            logEntry.setLongDescr("DESCRIPTION_UO_getProperties");
            logEntry.setDescription("SUCCESS");
            List<RTPConfig> scs = scertpprogramManager
                    .findRTPConfigs(programName);
            ret = BeanMappingUtil.getRTPConfigList(scs);

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        // return ret;
        rtpConfigTable.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to update list of akua RTPConfigs.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param programName
     *            the program name
     * @param rtpConfigs
     *            the rtp configs
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "UpdateRTPConfigs",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/UpdateRTPConfigs")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "UpdateRTPConfigs",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateRTPConfigs")
    @ResponseWrapper(
            localName = "UpdateRTPConfigsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateRTPConfigsResponse")
    public String updateRTPConfigs(
            @WebParam(name = "programName", targetNamespace = "") String programName,
            @WebParam(name = "rtpConfigs", targetNamespace = "") ListOfRTPConfigs rtpConfigs) {
        String retCode = "FAILURE: ";

        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);

        try {
            logEntry.setLongDescr("DESCRIPTION_UO_updateProperties");

            List<RTPConfig> sConfigList = BeanMappingUtil
                    .getRTPConfigList(rtpConfigs);

            scertpprogramManager.saveRTPConfig(sConfigList, programName);

            retCode = "SUCCESS";
        } catch (Exception e) {
            String message = e.getMessage();
            if (message == null) {
                List<String> parameters = new ArrayList<String>();
                parameters.add("updateContacts");
                message = ErrorResourceUtil.getErrorMessage(
                        "ERROR_INTERNAL_ERROR", parameters);
            }
            logEntry.setDescription(message);
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + message;
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }

    /**
     * This function is used to list of akua SeasonConfigs.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param returnValue
     *            the return value
     * @param seasonConfigTable
     *            the season config table
     * @param programName
     *            the program name
     */
    @WebMethod(
            operationName = "GetSeasonConfigs",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/GetSeasonConfigs")
    @RequestWrapper(
            localName = "GetSeasonConfigs",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetSeasonConfigs")
    @ResponseWrapper(
            localName = "GetSeasonConfigsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.GetSeasonConfigsResponse")
    public void getSeasonConfigs(
            @WebParam(name = "programName", targetNamespace = "") String programName,
            @WebParam(name = "seasonConfigTable", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<ListOfSeasonConfigs> seasonConfigTable,
            @WebParam(name = "returnValue", targetNamespace = "",
                    mode = WebParam.Mode.OUT) Holder<String> returnValue) {
        String retCode = "FAILURE: ";
        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);
        ListOfSeasonConfigs ret = new ListOfSeasonConfigs();
        try {
            logEntry.setLongDescr("DESCRIPTION_UO_getProperties");
            logEntry.setDescription("SUCCESS");
            List<SeasonConfig> scs = programManager1
                    .findSeasonConfigs(programName);
            ret = BeanMappingUtil.getSeasonConfigList(scs);

            retCode = "SUCCESS";
        } catch (Exception e) {
            logEntry.setDescription(e.getMessage());
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + e.getMessage();
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    ret, retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }

        // return ret;
        seasonConfigTable.value = ret;
        returnValue.value = retCode;
    }

    /**
     * This function is used to update list of akua SeasonConfigs.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param seasonConfigs
     *            the season configs
     * @param programName
     *            the program name
     * 
     * @return the string
     * 
     *         returns java.lang.String
     */
    @WebMethod(
            operationName = "UpdateSeasonConfigs",
            action = "http://www.openadr.org/DRAS/AkuaUtilityOperator/UpdateSeasonConfigs")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(
            localName = "UpdateSeasonConfigs",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateSeasonConfigs")
    @ResponseWrapper(
            localName = "UpdateSeasonConfigsResponse",
            targetNamespace = "http://www.openadr.org/DRAS/AkuaUtilityOperator/",
            className = "org.openadr.dras.akuautilityoperator.UpdateSeasonConfigsResponse")
    public String updateSeasonConfigs(
            @WebParam(name = "programName", targetNamespace = "") String programName,
            @WebParam(name = "seasonConfigs", targetNamespace = "") ListOfSeasonConfigs seasonConfigs) {
        String retCode = "FAILURE: ";

        FireLogEntry logEntry = LogUtils.createLogEntry();
        logEntry.setCategory(LogUtils.CATAGORY_WEBSERVICE);

        try {
            logEntry.setLongDescr("DESCRIPTION_UO_updateProperties");

            Set<SeasonConfig> sConfigList = BeanMappingUtil
                    .getSeasonConfigList(seasonConfigs);

            programManager1.saveSeasonConfig(sConfigList, programName);

            retCode = "SUCCESS";
        } catch (Exception e) {
            String message = e.getMessage();
            if (message == null) {
                List<String> parameters = new ArrayList<String>();
                parameters.add("updateContacts");
                message = ErrorResourceUtil.getErrorMessage(
                        "ERROR_INTERNAL_ERROR", parameters);
            }
            logEntry.setDescription(message);
            retCode = retCode + "TransactionID: "
                    + LogUtils.getTransactionIDFromLogEntry(logEntry)
                    + " ErrorMessage: " + message;
        } finally {
            String result = StringUtil.appendLongDesc(logEntry.getLongDescr(),
                    retCode);
            logEntry.setLongDescr(result);
            if ("SUCCESS".equals(retCode)) {
                log.debug(logEntry);
            } else {
                log.error(logEntry);
            }
        }
        return retCode;
    }
}