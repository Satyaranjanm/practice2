/*
 * www.akuacom.com - Automating Demand Response
 * 
 * com.akuacom.pss2.clientws.soap.SOAPWS.java - Copyright(c)1994 to 2010 by Akuacom . All rights reserved. 
 * Redistribution and use in source and binary forms, with or without modification, is prohibited.
 *
 */
package com.akuacom.pss2.clientws.soap;

import java.io.StringWriter;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.ejb.EJBException;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.PropertyException;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import javax.xml.ws.WebServiceContext;

import org.apache.log4j.Logger;
import org.openadr.dras.drasclientsoap.DRASClientSOAP;
import org.openadr.dras.eventstate.EventStateConfirmation;
import org.openadr.dras.eventstate.ListOfEventStates;
import org.openadr.dras.eventstate.ObjectFactory;

import com.akuacom.ejb.client.EJB3Factory;
import com.akuacom.pss2.client.ClientManager;
import com.akuacom.pss2.contact.ConfirmationLevel;
import com.akuacom.pss2.core.EJBFactory;
import com.akuacom.pss2.event.ClientConversationState;
import com.akuacom.pss2.event.EventManager;
import com.akuacom.pss2.participant.Participant;
import com.akuacom.pss2.system.SystemManager;
import com.akuacom.pss2.system.property.PSS2Features;
import com.akuacom.pss2.system.property.PSS2Properties;
import com.akuacom.pss2.util.LogUtils;
import com.kanaeki.firelog.util.FireLogEntry;
import com.sun.xml.bind.marshaller.NamespacePrefixMapper;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.1-b03- Generated
 * source version: 2.0
 */
@WebService(name = "DRASClientSOAP", targetNamespace = "http://www.openadr.org/DRAS/DRASClientSOAP/")
public class SOAPWS implements DRASClientSOAP {

    /** The program manager. */
    private EventManager eventManager = EJBFactory
            .getBean(EventManager.class);

    private ClientManager clientManager = EJBFactory
            .getBean(ClientManager.class);


    private ThreadLocal<WebServiceContext> threadSafeContext = new ThreadLocal<WebServiceContext>();
    
    @Resource
    public void setContext(WebServiceContext context){
    	threadSafeContext.set(context);
    }
    
    /** The Constant log. */
    private static final Logger log = Logger.getLogger(SOAPWS.class);

    /** The Constant operationModeSchedule. */
    private static final String operationModeSchedule = "<p:operationModeSchedule/>";

    /** The Constant drEventData. */
    private static final String drEventData = "<p:drEventData/>";

    /** The Constant customData. */
    private static final String customData = "<p:customData/>";

    /**
     * Gets the event states.
     * 
     * @param returnValue
     *            the return value
     * @param empty
     *            the empty
     * @param eventStates
     *            the event states
     */
    @WebMethod(operationName = "GetEventStates", action = "http://www.openadr.org/DRAS/DRASClientSOAP/GetEventStates")
    @RequestWrapper(localName = "GetEventStates", targetNamespace = "http://www.openadr.org/DRAS/DRASClientSOAP/", className = "org.openadr.dras.drasclientsoap.GetEventStates")
    @ResponseWrapper(localName = "GetEventStatesResponse", targetNamespace = "http://www.openadr.org/DRAS/DRASClientSOAP/", className = "org.openadr.dras.drasclientsoap.GetEventStatesResponse")
    public void getEventStates(
            @WebParam(name = "empty", targetNamespace = "") Object empty,
            @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT) Holder<String> returnValue,
            @WebParam(name = "eventStates", targetNamespace = "", mode = WebParam.Mode.OUT) Holder<ListOfEventStates> eventStates) {
        try {
            JAXBContext jc = JAXBContext
                    .newInstance("org.openadr.dras.eventstate");
            Marshaller marshaller = jc.createMarshaller();

            String participantName = threadSafeContext.get().getUserPrincipal().getName();

	        SystemManager sm = EJB3Factory.getLocalBean(SystemManager.class);
	        PSS2Properties props = sm.getPss2Properties();
            List<com.akuacom.pss2.util.EventState> pss2EventStates = clientManager
                    .getClientEventStates(participantName,
                    props.getConfirmationLevel() == ConfirmationLevel.NONE);
            com.akuacom.pss2.util.EventState pss2EventState = pss2EventStates
                    .get(0);

            clientManager.createClientConversationState(pss2EventState);

            org.openadr.dras.eventstate.EventState wsEventState = 
                    clientManager.parseEventState(participantName, pss2EventState);
            
            JAXBElement<org.openadr.dras.eventstate.EventState> wsEventStateElement = (new ObjectFactory())
                    .createEventState(wsEventState);

            java.io.StringWriter sw = new StringWriter();
            NamespacePrefixMapper npm = new PMapper();
            marshaller.setProperty("com.sun.xml.bind.namespacePrefixMapper",
                    npm);
            marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,
                    "http://openadr.lbl.gov/src/1/EventState.xsd");
            marshaller.marshal(wsEventStateElement, sw);

            // strip out empty lists for backward compatibility
            // TODO: is there a flag in the marshaller for this?
            StringBuffer sb = sw.getBuffer();
            int start = sb.indexOf(operationModeSchedule);
            if (start != -1) {
                sb.delete(start, start + operationModeSchedule.length());
            }
            start = sb.indexOf(drEventData);
            if (start != -1) {
                sb.delete(start, start + drEventData.length());
            }
            start = sb.indexOf(customData);
            if (start != -1) {
                sb.delete(start, start + customData.length());
            }

            returnValue.value = sw.toString();
        } catch (PropertyException e) {
            log.debug(LogUtils.createExceptionLogEntry("",
                    LogUtils.CATAGORY_COMMS, e));
        } catch (JAXBException e) {
            log.debug(LogUtils.createExceptionLogEntry("",
                    LogUtils.CATAGORY_COMMS, e));
        }
    }

    /**
     * Sets the event state confirmation.
     * 
     * @param eventStateConfirmation
     *            the event state confirmation
     * 
     * @return the string
     */
    /**
     * 
     * @param eventStateConfirmation
     * @return returns java.lang.String
     */
    @WebMethod(operationName = "SetEventStateConfirmation", action = "http://www.openadr.org/DRAS/DRASClientSOAP/SetEventStateConfirmation")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "SetEventStateConfirmation", targetNamespace = "http://www.openadr.org/DRAS/DRASClientSOAP/", className = "org.openadr.dras.drasclientsoap.SetEventStateConfirmation")
    @ResponseWrapper(localName = "SetEventStateConfirmationResponse", targetNamespace = "http://www.openadr.org/DRAS/DRASClientSOAP/", className = "org.openadr.dras.drasclientsoap.SetEventStateConfirmationResponse")
    public String setEventStateConfirmation(
            @WebParam(name = "eventStateConfirmation", targetNamespace = "") EventStateConfirmation eventStateConfirmation) {
    	ClientConversationState es = null;
    	boolean success = eventStateConfirmation.getDrasClientID() != null
                && eventStateConfirmation.getEventStateID() != null;

        SystemManager sm = EJB3Factory.getLocalBean(SystemManager.class);
        PSS2Properties props = sm.getPss2Properties();
        if (props.getConfirmationLevel() != ConfirmationLevel.NONE) {
            if (success) {
                // find matching ConversationState
                es = clientManager
                        .getClientConversationState(eventStateConfirmation.getEventStateID()
                                .longValue());
                success = es != null
                        && eventStateConfirmation.getDrasClientID().equals(
                                es.getDrasClientId());
            }

            if (success) {
                // good confirmation. Will return success but need to remove the
                // ConversationState since a ConversationState should only get one
                // confirmation
                try {
                    clientManager.removeClientConversationState(
                        eventStateConfirmation.getEventStateID().longValue());
                } catch(EJBException ejbx) {
                    // Because of concurrent processes, it's possible
                    // the event state could already be deleted.
                    // So we won't panic if the delete fails.
                    log.warn("EJB exception deleting confirmed ClientConversationState: "+ejbx.getMessage());
                } 
            }
        }

        if (props.getConfirmationLevel() != ConfirmationLevel.FULL) {
            success = true;
        }

        String clientName = threadSafeContext.get().getUserPrincipal().getName();
        String res;

        if (success) {
            res = "SUCCESS";
        } else {
            res = "FAILURE";
            FireLogEntry logEntry = new FireLogEntry();
            logEntry.setCategory(LogUtils.CATAGORY_COMMS);
            logEntry.setUserName(clientName);
            logEntry.setDescription("Received SOAP EventStateConfirmation. Result: FAILURE");
            log.warn(logEntry);
        }

        clientManager.updateParticipantCommunications(clientName,
                new Date(), success, es);
        
        if(eventStateConfirmation.isOptInStatus() != null && 
            	!eventStateConfirmation.isOptInStatus())
            {
    			SystemManager systemManager = EJBFactory.getBean(SystemManager.class);
    			PSS2Features features = systemManager.getPss2Features();
    			if (features.isClientOptOut()) 
    			{
    	             Participant client = clientManager.getClientOnly(clientName);
    	             if (client.getClientAllowedToOptOut().booleanValue()) {
    	            	// TODO move to reports
    	             	log.debug(LogUtils.createLogEntryUser(eventStateConfirmation.getProgramName(),
    	                      clientName, LogUtils.CATAGORY_COMMS, "client opt out received", ""));
    	            	 
    		             eventManager.removeParticipantFromEvent(
    		            		 eventStateConfirmation.getEventIdentifier(), client.getParent());
    	             } else {
    	            	 // not logging this for now to avoid flooding logs.
    	             }
    			}
            }

        return res;
    }
}
