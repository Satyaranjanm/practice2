/*
 * www.akuacom.com - Automating Demand Response
 * 
 * org.openadr.dras.participantoperator.ParticipantOperator.java - Copyright(c)1994 to 2010 by Akuacom . All rights reserved. 
 * Redistribution and use in source and binary forms, with or without modification, is prohibited.
 *
 */

package org.openadr.dras.participantoperator;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import org.openadr.dras.bid.Bid;
import org.openadr.dras.drasclient.DRASClient;
import org.openadr.dras.drasclient.ListOfCommsStatus;
import org.openadr.dras.drasclient.ListOfDRASClients;
import org.openadr.dras.eventinfo.ListOfEventInfoType;
import org.openadr.dras.eventstate.ListOfEventStates;
import org.openadr.dras.feedback.FeedBack;
import org.openadr.dras.feedback.ListOfFeedback;
import org.openadr.dras.logs.ListOfDRASClientAlarms;
import org.openadr.dras.logs.ListOfTransactionLogs;
import org.openadr.dras.optoutstate.ListOfOptOutStates;
import org.openadr.dras.optoutstate.OptOutState;
import org.openadr.dras.participantaccount.ListOfParticipantAccountIDs;
import org.openadr.dras.participantaccount.ListOfParticipantAccounts;
import org.openadr.dras.participantaccount.ParticipantAccount;
import org.openadr.dras.programconstraint.DateTimeWindow;
import org.openadr.dras.programconstraint.ListOfProgramConstraints;
import org.openadr.dras.programconstraint.ProgramConstraint;
import org.openadr.dras.responseschedule.ResponseSchedule;
import org.openadr.dras.utilitydrevent.ListOfEventIDs;
import org.openadr.dras.utilityprogram.ListOfIDs;
import org.openadr.dras.utilityprogram.ListOfProgramNames;
import org.openadr.dras.utilityprogram.ParticipantList;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.1-b03-
 * Generated source version: 2.0
 */
@WebService(name = "ParticipantOperator", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/")
public interface ParticipantOperator {


    /**
     * This function is used to get the Participants account
     * information. The ParticipantAccounts to fetchcan be
     * specified either as a list of ParticipantAccount
     * identifiers or as a participantGroup identifier.
     * 
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the return values.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantAccounts the participant accounts
     * @param participantIDs the participant i ds
     * @param returnValue the return value
     * @param participantGroup the participant group
     */
    @WebMethod(operationName = "GetParticipantAccounts", action = "http://www.openadr.org/DRAS/ParticipantOperator/NewOperation")
    @RequestWrapper(localName = "GetParticipantAccounts", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetParticipantAccounts")
    @ResponseWrapper(localName = "GetParticipantAccountsResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetParticipantAccountsResponse")
    public void getParticipantAccounts(
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfParticipantAccountIDs participantIDs,
        @WebParam(name = "participantGroup", targetNamespace = "")
        String participantGroup,
        @WebParam(name = "participantAccounts", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfParticipantAccounts> participantAccounts,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to modify existing Participant
     * Accounts. While certain fields of the Participant
     * Account may be viewed by a Participant Manager they may
     * not be modified. These fields include the following:
     * 
     * - Participant uid
     * 
     * - Participant name
     * 
     * - User name
     * 
     * -Program names
     * 
     * This method may be used to modify more than one
     * ParticipantAccount. The ParticipantAccounts to modify can
     * be specified either as a list of ParticipantAccount
     * identifiers or as a participantGroup identifier.
     * 
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * that are being accessed.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantIDs the participant i ds
     * @param participantGroup the participant group
     * @param participantAccount the participant account
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "ModifyParticipantAccounts", action = "http://www.openadr.org/DRAS/ParticipantOperator/ModifyParticipantAccounts")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "ModifyParticipantAccounts", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.ModifyParticipantAccounts")
    @ResponseWrapper(localName = "ModifyParticipantAccountsResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.ModifyParticipantAccountsResponse")
    public String modifyParticipantAccounts(
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfParticipantAccountIDs participantIDs,
        @WebParam(name = "participantGroup", targetNamespace = "")
        String participantGroup,
        @WebParam(name = "participantAccount", targetNamespace = "")
        ParticipantAccount participantAccount);

    /**
     * Description This function is used to create a DRAS
     * Client. Note that Program constraints and Response
     * schedules may be created through a separate set of
     * functions and need not be created using this function.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param drasClient the dras client
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "CreateDRASClient", action = "http://www.openadr.org/DRAS/ParticipantOperator/CreateDRASClient")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "CreateDRASClient", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.CreateDRASClient")
    @ResponseWrapper(localName = "CreateDRASClientResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.CreateDRASClientResponse")
    public String createDRASClient(
        @WebParam(name = "DRASClient", targetNamespace = "")
        DRASClient drasClient);

    /**
     * This function is used to modify an existing DRASClient
     * object.
     * 
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param drasClient the dras client
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "ModifyDRASClient", action = "http://www.openadr.org/DRAS/ParticipantOperator/ModifyDRASClient")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "ModifyDRASClient", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.ModifyDRASClient")
    @ResponseWrapper(localName = "ModifyDRASClientResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.ModifyDRASClientResponse")
    public String modifyDRASClient(
        @WebParam(name = "DRASClient", targetNamespace = "")
        DRASClient drasClient);

    /**
     * This function is used to delete an existing DRAS Client.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param drasClientID the dras client id
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "DeleteDRASClient", action = "http://www.openadr.org/DRAS/ParticipantOperator/DeleteDRASClient")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "DeleteDRASClient", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.DeleteDRASClient")
    @ResponseWrapper(localName = "DeleteDRASClientResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.DeleteDRASClientResponse")
    public String deleteDRASClient(
        @WebParam(name = "DRASClientID", targetNamespace = "")
        String drasClientID);

    /**
     * This function is used to fetch DRAS Client
     * information associated with Participant. They may be
     * fetched by specifying either DRASClient identifiers or
     * ParticipantAccount identifiers.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantIDs the participant i ds
     * @param returnValue the return value
     * @param participantGroup the participant group
     * @param drasClients the dras clients
     * @param drasClientIDs the dras client i ds
     */
    @WebMethod(operationName = "GetDRASClientInfo", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDRASClientInfo")
    @RequestWrapper(localName = "GetDRASClientInfo", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDRASClientInfo")
    @ResponseWrapper(localName = "GetDRASClientInfoResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDRASClientInfoResponse")
    public void getDRASClientInfo(
        @WebParam(name = "DRASClientIDs", targetNamespace = "")
        ListOfIDs drasClientIDs,
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfParticipantAccountIDs participantIDs,
        @WebParam(name = "participantGroup", targetNamespace = "")
        String participantGroup,
        @WebParam(name = "DRASClients", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfDRASClients> drasClients,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to fetch the ProgramCconstraints
     * object associated with the Participant as a whole. The
     * specification for which ParticipantAccounts to access
     * can me made using either a list of ParticipantAccount
     * identifers of the DRASClients, or a Participant Group
     * identifier.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param programConstraints the program constraints
     * @param participantIDs the participant i ds
     * @param returnValue the return value
     * @param participantGroup the participant group
     * @param programName the program name
     */
    @WebMethod(operationName = "GetParticipantProgramConstraints", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetParticipantProgramConstraints")
    @RequestWrapper(localName = "GetParticipantProgramConstraints", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetParticipantProgramConstraints")
    @ResponseWrapper(localName = "GetParticipantProgramConstraintsResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetParticipantProgramConstraintsResponse")
    public void getParticipantProgramConstraints(
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfParticipantAccountIDs participantIDs,
        @WebParam(name = "programName", targetNamespace = "")
        String programName,
        @WebParam(name = "participantGroup", targetNamespace = "")
        String participantGroup,
        @WebParam(name = "programConstraints", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfProgramConstraints> programConstraints,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to set the program constraints
     * associated with a Participant as a whole. If program
     * constraints already exist for the program specified then
     * they are superseded by the constraints passed into this
     * function. The specification for which
     * ParticipantAccounts to access can me made using either a
     * list of ParticipantAccount identifers of the DRASClients,
     * or a Participant Group identifier.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * that are being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param programConstraint the program constraint
     * @param participantIDs the participant i ds
     * @param participantGroup the participant group
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "SetParticipantProgramConstraints", action = "http://www.openadr.org/DRAS/ParticipantOperator/SetParticipantProgramConstraints")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "SetParticipantProgramConstraints", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SetParticipantProgramConstraints")
    @ResponseWrapper(localName = "SetParticipantProgramConstraintsResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SetParticipantProgramConstraintsResponse")
    public String setParticipantProgramConstraints(
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfParticipantAccountIDs participantIDs,
        @WebParam(name = "participantGroup", targetNamespace = "")
        String participantGroup,
        @WebParam(name = "programConstraint", targetNamespace = "")
        ProgramConstraint programConstraint);

    /**
     * This function is used to delete the ProgramConstraints
     * associated with a program. The specification for which
     * ParticipantAccounts to access can me made using either a
     * list of ParticipantAccount identifers of the DRASClients,
     * or a Participant Group identifier.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * that are being accessed.
     * 
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantIDs the participant i ds
     * @param participantGroup the participant group
     * @param programName the program name
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "DeleteParticipantProgramConstraints", action = "http://www.openadr.org/DRAS/ParticipantOperator/DeleteParticipantProgramConstraints")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "DeleteParticipantProgramConstraints", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.DeleteParticipantProgramConstraints")
    @ResponseWrapper(localName = "DeleteParticipantProgramConstraintsResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.DeleteParticipantProgramConstraintsResponse")
    public String deleteParticipantProgramConstraints(
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfParticipantAccountIDs participantIDs,
        @WebParam(name = "participantGroup", targetNamespace = "")
        String participantGroup,
        @WebParam(name = "programName", targetNamespace = "")
        String programName);

    /**
     * This function is used to fetch the program constraints
     * associated with the DRAS Client. The specification for
     * which DRASClients to access can me made using either a
     * list of DRAClient identifiers, the ParticipantAccount
     * identifers of the DRASClients, or a Participant Group
     * identifier.
     * 
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param programConstraints the program constraints
     * @param participantIDs the participant i ds
     * @param returnValue the return value
     * @param participantGroup the participant group
     * @param drasClientIDs the dras client i ds
     */
    @WebMethod(operationName = "GetDRASClientProgramConstraints", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDRASClientProgramConstraints")
    @RequestWrapper(localName = "GetDRASClientProgramConstraints", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDRASClientProgramConstraints")
    @ResponseWrapper(localName = "GetDRASClientProgramConstraintsResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDRASClientProgramConstraintsResponse")
    public void getDRASClientProgramConstraints(
        @WebParam(name = "drasClientIDs", targetNamespace = "")
        ListOfIDs drasClientIDs,
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfParticipantAccountIDs participantIDs,
        @WebParam(name = "participantGroup", targetNamespace = "")
        String participantGroup,
        @WebParam(name = "programConstraints", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfProgramConstraints> programConstraints,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to set the program constraints
     * associated with a DRASClient. If program constraints
     * already exist for the program specified then they are
     * superseded by the constraints passed into this function.
     * The specification for which DRASClients to access can me
     * made using either a list of DRAClient identifiers, the
     * ParticipantAccount identifers of the DRASClients, or a
     * Participant Group identifier.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param programConstraint the program constraint
     * @param participantIDs the participant i ds
     * @param participantGroup the participant group
     * @param drasClientIDs the dras client i ds
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "SetDRASClientProgramConstraints", action = "http://www.openadr.org/DRAS/ParticipantOperator/SetDRASClientProgramConstraints")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "SetDRASClientProgramConstraints", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SetDRASClientProgramConstraints")
    @ResponseWrapper(localName = "SetDRASClientProgramConstraintsResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SetDRASClientProgramConstraintsResponse")
    public String setDRASClientProgramConstraints(
        @WebParam(name = "drasClientIDs", targetNamespace = "")
        ListOfIDs drasClientIDs,
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfParticipantAccountIDs participantIDs,
        @WebParam(name = "participantGroup", targetNamespace = "")
        String participantGroup,
        @WebParam(name = "programConstraint", targetNamespace = "")
        ProgramConstraint programConstraint);

    /**
     * This function is used to delete the DRASClient
     * onstraints associated with a program. The specification
     * for which DRASClients to access can me made using either
     * a list of DRAClient identifiers, the ParticipantAccount
     * identifers of the DRASClients, or a Participant Group
     * identifier.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantIDs the participant i ds
     * @param participantGroup the participant group
     * @param drasClientIDs the dras client i ds
     * @param programName the program name
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "DeleteDRASClientProgramConstraints", action = "http://www.openadr.org/DRAS/ParticipantOperator/DeleteDRASClientProgramConstraints")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "DeleteDRASClientProgramConstraints", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.DeleteDRASClientProgramConstraints")
    @ResponseWrapper(localName = "DeleteDRASClientProgramConstraintsResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.DeleteDRASClientProgramConstraintsResponse")
    public String deleteDRASClientProgramConstraints(
        @WebParam(name = "drasClientIDs", targetNamespace = "")
        ListOfIDs drasClientIDs,
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfParticipantAccountIDs participantIDs,
        @WebParam(name = "participantGroup", targetNamespace = "")
        String participantGroup,
        @WebParam(name = "programName", targetNamespace = "")
        String programName);

    /**
     * This function is used to retrieve the information
     * necessary to help an operator edit and specify a
     * Response Schedule and its Operating States.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * that are being accessed.
     * 
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param programConstraints the program constraints
     * @param drasClientID the dras client id
     * @param returnValue the return value
     * @param eventInfo the event info
     * @param programName the program name
     */
    @WebMethod(operationName = "GetProgramInformation", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetProgramInformation")
    @RequestWrapper(localName = "GetProgramInformation", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetProgramInformation")
    @ResponseWrapper(localName = "GetProgramInformationResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetProgramInformationResponse")
    public void getProgramInformation(
        @WebParam(name = "programName", targetNamespace = "")
        String programName,
        @WebParam(name = "drasClientID", targetNamespace = "")
        String drasClientID,
        @WebParam(name = "programConstraints", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ProgramConstraint> programConstraints,
        @WebParam(name = "eventInfo", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfEventInfoType> eventInfo,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to create a response schedule for
     * a specific Simple DRAS Client and program. If the
     * response schedule for the DRAS Client and program
     * already exists then it is superseded by the new Response
     * Schedule passed into this function.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param responseSchedule the response schedule
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "CreateResponseSchedule", action = "http://www.openadr.org/DRAS/ParticipantOperator/CreateResponseSchedule")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "CreateResponseSchedule", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.CreateResponseSchedule")
    @ResponseWrapper(localName = "CreateResponseScheduleResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.CreateResponseScheduleResponse")
    public String createResponseSchedule(
        @WebParam(name = "responseSchedule", targetNamespace = "")
        ResponseSchedule responseSchedule);

    /**
     * This function is used to delete an existing
     * Responsechedule assiciated with a Simple DRAS Client.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param drasClientID the dras client id
     * @param programName the program name
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "DeleteResponseSchedule", action = "http://www.openadr.org/DRAS/ParticipantOperator/DeleteResponseSchedule")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "DeleteResponseSchedule", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.DeleteResponseSchedule")
    @ResponseWrapper(localName = "DeleteResponseScheduleResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.DeleteResponseScheduleResponse")
    public String deleteResponseSchedule(
        @WebParam(name = "programName", targetNamespace = "")
        String programName,
        @WebParam(name = "drasClientID", targetNamespace = "")
        String drasClientID);

    /**
     * This function is used to fetch a specific
     * ResponseSchedule corresponding to a Program and a
     * DRASClient.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the DRAS Client.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param drasClientID the dras client id
     * @param returnValue the return value
     * @param responseSchedule the response schedule
     * @param programName the program name
     */
    @WebMethod(operationName = "GetResponseSchedule", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetResponseSchedule")
    @RequestWrapper(localName = "GetResponseSchedule", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetResponseSchedule")
    @ResponseWrapper(localName = "GetResponseScheduleResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetResponseScheduleResponse")
    public void getResponseSchedule(
        @WebParam(name = "programName", targetNamespace = "")
        String programName,
        @WebParam(name = "drasClientID", targetNamespace = "")
        String drasClientID,
        @WebParam(name = "responseSchedule", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ResponseSchedule> responseSchedule,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to send information to the DRAS
     * concerning the state of the facility and how the
     * Participant/DRAS Client reacted to the DR Event being
     * issued.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the return values.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - DRAS Client associated with the Participant ID
     * 
     * - Participant Manager associated with the Participant ID
     * 
     * @param feedBack the feed back
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "SetDREventFeedback", action = "http://www.openadr.org/DRAS/ParticipantOperator/SetDREventFeedback")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "SetDREventFeedback", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SetDREventFeedback")
    @ResponseWrapper(localName = "SetDREventFeedbackResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SetDREventFeedbackResponse")
    public String setDREventFeedback(
        @WebParam(name = "feedBack", targetNamespace = "")
        FeedBack feedBack);

    /**
     * This function is used to set a Participants standing
     * bid for a program. If a standing bid for the program
     * already exists then this function can be used to modify
     * it.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the ParticipantAccounts that
     * correspond to the Bid being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param bid the bid
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "SubmitStandingBid", action = "http://www.openadr.org/DRAS/ParticipantOperator/SubmitStandingBid")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "SubmitStandingBid", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SubmitStandingBid")
    @ResponseWrapper(localName = "SubmitStandingBidResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SubmitStandingBidResponse")
    public String submitStandingBid(
        @WebParam(name = "bid", targetNamespace = "")
        Bid bid);

    /**
     * This function returns a Participants standing bid for a
     * particular program.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the ParticipantAccounts that
     * correspond to the Bid being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param returnValue the return value
     * @param participantID the participant id
     * @param bid the bid
     * @param programName the program name
     */
    @WebMethod(operationName = "GetStandingBid", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetStandingBid")
    @RequestWrapper(localName = "GetStandingBid", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetStandingBid")
    @ResponseWrapper(localName = "GetStandingBidResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetStandingBidResponse")
    public void getStandingBid(
        @WebParam(name = "participantID", targetNamespace = "")
        String participantID,
        @WebParam(name = "programName", targetNamespace = "")
        String programName,
        @WebParam(name = "bid", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<Bid> bid,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to delete a standing bid.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the ParticipantAccounts that
     * correspond to the Bid being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param participantID the participant id
     * @param programName the program name
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "DeleteStandingBid", action = "http://www.openadr.org/DRAS/ParticipantOperator/DeleteStandingBid")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "DeleteStandingBid", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.DeleteStandingBid")
    @ResponseWrapper(localName = "DeleteStandingBidResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.DeleteStandingBidResponse")
    public String deleteStandingBid(
        @WebParam(name = "participantID", targetNamespace = "")
        String participantID,
        @WebParam(name = "programName", targetNamespace = "")
        String programName);

    /**
     * This function is used to submit a Participants
     * real-time bid for a program. If a real-time bid for the
     * program already exists then this function can be used to
     * modify it.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the ParticipantAccounts that
     * correspond to the Bid being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param bid the bid
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "SubmitBid", action = "http://www.openadr.org/DRAS/ParticipantOperator/SubmitBid")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "SubmitBid", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SubmitBid")
    @ResponseWrapper(localName = "SubmitBidResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SubmitBidResponse")
    public String submitBid(
        @WebParam(name = "bid", targetNamespace = "")
        Bid bid);

    /**
     * This function returns a Participants real-time bid for
     * a DR event.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the ParticipantAccounts that
     * correspond to the Bid being accessed.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param eventID the event id
     * @param returnValue the return value
     * @param participantID the participant id
     * @param bid the bid
     */
    @WebMethod(operationName = "GetBid", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetBid")
    @RequestWrapper(localName = "GetBid", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetBid")
    @ResponseWrapper(localName = "GetBidResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetBidResponse")
    public void getBid(
        @WebParam(name = "eventID", targetNamespace = "")
        String eventID,
        @WebParam(name = "participantID", targetNamespace = "")
        String participantID,
        @WebParam(name = "bid", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<Bid> bid,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to create an Opt-out state for a
     * Participant.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the ParticipantAccounts that
     * correspond to the OptOutState being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param optOutState the opt out state
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "CreateOptOutState", action = "http://www.openadr.org/DRAS/ParticipantOperator/CreateOptOutState")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "CreateOptOutState", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.CreateOptOutState")
    @ResponseWrapper(localName = "CreateOptOutStateResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.CreateOptOutStateResponse")
    public String createOptOutState(
        @WebParam(name = "optOutState", targetNamespace = "")
        OptOutState optOutState);

    /**
     * This function is used to delete an existing Opt-out
     * state.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the ParticipantAccounts that
     * correspond to the OptOutState being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param optOutStateID the opt out state id
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "DeleteOptOutState", action = "http://www.openadr.org/DRAS/ParticipantOperator/DeleteOptOutState")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "DeleteOptOutState", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.DeleteOptOutState")
    @ResponseWrapper(localName = "DeleteOptOutStateResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.DeleteOptOutStateResponse")
    public String deleteOptOutState(
        @WebParam(name = "optOutStateID", targetNamespace = "")
        String optOutStateID);

    /**
     * This function is used to fetch the Opt-out states
     * associated with a Participant. There are a number of
     * optional search parameters that can be used to fetch the
     * OptOut states for a Participant.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the ParticipantAccounts that
     * correspond to the OptOutState being accessed.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param eventID the event id
     * @param drasClientID the dras client id
     * @param optOutStates the opt out states
     * @param returnValue the return value
     * @param optOutID the opt out id
     * @param participantID the participant id
     * @param programName the program name
     */
    @WebMethod(operationName = "GetOptOutStates", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetOptOutStates")
    @RequestWrapper(localName = "GetOptOutStates", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetOptOutStates")
    @ResponseWrapper(localName = "GetOptOutStatesResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetOptOutStatesResponse")
    public void getOptOutStates(
        @WebParam(name = "participantID", targetNamespace = "")
        String participantID,
        @WebParam(name = "programName", targetNamespace = "")
        String programName,
        @WebParam(name = "drasClientID", targetNamespace = "")
        String drasClientID,
        @WebParam(name = "optOutID", targetNamespace = "")
        String optOutID,
        @WebParam(name = "eventID", targetNamespace = "")
        String eventID,
        @WebParam(name = "optOutStates", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfOptOutStates> optOutStates,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is for retrieving a DRAS Clients current
     * communication state. The states can be fetched based
     * upon aa ParticipantAccount identifier, or a Program
     * name. If none of those parameters are specified then the
     * states of all DRAS Clients are returned
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the return values.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param drasClientStatus the dras client status
     * @param returnValue the return value
     * @param participants the participants
     * @param programNames the program names
     */
    @WebMethod(operationName = "GetDRASClientCommsStatus", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDRASClientCommsStatus")
    @RequestWrapper(localName = "GetDRASClientCommsStatus", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDRASClientCommsStatus")
    @ResponseWrapper(localName = "GetDRASClientCommsStatusResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDRASClientCommsStatusResponse")
    public void getDRASClientCommsStatus(
        @WebParam(name = "participants", targetNamespace = "")
        ParticipantList participants,
        @WebParam(name = "programNames", targetNamespace = "")
        ListOfProgramNames programNames,
        @WebParam(name = "DRASClientStatus", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfCommsStatus> drasClientStatus,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to retrieve any of the transaction
     * logs associated with the DRAS. A number of search keys
     * can be used to specify whcih transactions are retrieved
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the return values.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param transactions the transactions
     * @param timeInterval the time interval
     * @param participantIDs the participant i ds
     * @param returnValue the return value
     * @param resultCode the result code
     * @param userNames the user names
     * @param methodName the method name
     * @param drasClientIDs the dras client i ds
     */
    @WebMethod(operationName = "GetDRASTransactions", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDRASTransactions")
    @RequestWrapper(localName = "GetDRASTransactions", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDRASTransactions")
    @ResponseWrapper(localName = "GetDRASTransactionsResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDRASTransactionsResponse")
    public void getDRASTransactions(
        @WebParam(name = "userNames", targetNamespace = "")
        ListOfIDs userNames,
        @WebParam(name = "DRASClientIDs", targetNamespace = "")
        ListOfIDs drasClientIDs,
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfIDs participantIDs,
        @WebParam(name = "methodName", targetNamespace = "")
        String methodName,
        @WebParam(name = "timeInterval", targetNamespace = "")
        DateTimeWindow timeInterval,
        @WebParam(name = "resultCode", targetNamespace = "")
        String resultCode,
        @WebParam(name = "transactions", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfTransactionLogs> transactions,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to retrieve DRAS Event States
     * that have been created within the DRAS.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param returnValue the return value
     * @param drasClients the dras clients
     * @param eventStates the event states
     * @param eventIDs the event i ds
     * @param participants the participants
     * @param programNames the program names
     */
    @WebMethod(operationName = "GetDRASEventStates", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDRASEventStates")
    @RequestWrapper(localName = "GetDRASEventStates", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDRASEventStates")
    @ResponseWrapper(localName = "GetDRASEventStatesResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDRASEventStatesResponse")
    public void getDRASEventStates(
        @WebParam(name = "eventIDs", targetNamespace = "")
        ListOfEventIDs eventIDs,
        @WebParam(name = "programNames", targetNamespace = "")
        ListOfProgramNames programNames,
        @WebParam(name = "participants", targetNamespace = "")
        ParticipantList participants,
        @WebParam(name = "drasClients", targetNamespace = "")
        ListOfIDs drasClients,
        @WebParam(name = "eventStates", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfEventStates> eventStates,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to retrieve DRAS Client Alarms
     * that have been logged within the DRAS.
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the return values.
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param timeInterval the time interval
     * @param participantIDs the participant i ds
     * @param returnValue the return value
     * @param alarms the alarms
     * @param drasClientIDs the dras client i ds
     */
    @WebMethod(operationName = "GetDRASClientAlarms", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDRASClientAlarms")
    @RequestWrapper(localName = "GetDRASClientAlarms", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDRASClientAlarms")
    @ResponseWrapper(localName = "GetDRASClientAlarmsResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDRASClientAlarmsResponse")
    public void getDRASClientAlarms(
        @WebParam(name = "DRASClientIDs", targetNamespace = "")
        ListOfIDs drasClientIDs,
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfIDs participantIDs,
        @WebParam(name = "timeInterval", targetNamespace = "")
        DateTimeWindow timeInterval,
        @WebParam(name = "alarms", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfDRASClientAlarms> alarms,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to fetch a list of Feedback
     * objects based upon a set of search criteria
     * 
     * For security reasons if the role of the user accessing
     * this method is a Participant Manager then the user
     * credentials of the Participant Manager must match the
     * user credentials on the Participant Accounts that are
     * associated with the return values.
     * 
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * @param feedback the feedback
     * @param timeInterval the time interval
     * @param participantIDs the participant i ds
     * @param returnValue the return value
     * @param name the name
     * @param drasClientIDs the dras client i ds
     * @param programNames the program names
     */
    @WebMethod(operationName = "GetDREventFeedback", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetDREventFeedback")
    @RequestWrapper(localName = "GetDREventFeedback", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDREventFeedback")
    @ResponseWrapper(localName = "GetDREventFeedbackResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetDREventFeedbackResponse")
    public void getDREventFeedback(
        @WebParam(name = "DRASClientIDs", targetNamespace = "")
        ListOfIDs drasClientIDs,
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfIDs participantIDs,
        @WebParam(name = "programNames", targetNamespace = "")
        ListOfIDs programNames,
        @WebParam(name = "timeInterval", targetNamespace = "")
        DateTimeWindow timeInterval,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "feedback", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfFeedback> feedback,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function puts a DRAS Client into or out of test
     * mode. If a DRAS Client is in test mode then it is
     * essentially off line and will not receive any automated
     * DR signals.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * - DRAS Client Installers
     * 
     * @param drasClientID the dras client id
     * @param mode the mode
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "SetTestMode", action = "http://www.openadr.org/DRAS/ParticipantOperator/SetTestMode")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "SetTestMode", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SetTestMode")
    @ResponseWrapper(localName = "SetTestModeResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SetTestModeResponse")
    public String setTestMode(
        @WebParam(name = "drasClientID", targetNamespace = "")
        String drasClientID,
        @WebParam(name = "mode", targetNamespace = "")
        String mode);

    /**
     * This function sends a manual test message to a DRAS Client and
     * if it is a Simple DRAS Client then it can be used to set
     * the operation mode value and the event status variables. The DRAS Client must be in
     * test mode for this method to work.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * - DRAS Client Installers
     * 
     * @param drasClientID the dras client id
     * @param opertaionModeValue the opertaion mode value
     * @param eventStatus the event status
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "SetTestModeState", action = "http://www.openadr.org/DRAS/ParticipantOperator/SetTestModeState")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "SetTestModeState", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SetTestModeState")
    @ResponseWrapper(localName = "SetTestModeStateResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.SetTestModeStateResponse")
    public String setTestModeState(
        @WebParam(name = "drasClientID", targetNamespace = "")
        String drasClientID,
        @WebParam(name = "opertaionModeValue", targetNamespace = "")
        String opertaionModeValue,
        @WebParam(name = "eventStatus", targetNamespace = "")
        String eventStatus);

    /**
     * This function is used to get the current operation state
     * of the DRAS Client if it is in test mode.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * - All Participant Managers
     * 
     * - DRAS Client Installers
     * 
     * @param getTestModeStateResponse the get test mode state response
     * @param drasClientID the dras client id
     * @param returnValue the return value
     */
    @WebMethod(operationName = "GetTestModeState", action = "http://www.openadr.org/DRAS/ParticipantOperator/GetTestModeState")
    @RequestWrapper(localName = "GetTestModeState", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetTestModeState")
    @ResponseWrapper(localName = "GetTestModeStateResponse", targetNamespace = "http://www.openadr.org/DRAS/ParticipantOperator/", className = "org.openadr.dras.participantoperator.GetTestModeStateResponse")
    public void getTestModeState(
        @WebParam(name = "drasClientID", targetNamespace = "")
        String drasClientID,
        @WebParam(name = "GetTestModeStateResponse", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> getTestModeStateResponse,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

}
