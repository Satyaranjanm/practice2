/*
 * www.akuacom.com - Automating Demand Response
 * 
 * org.openadr.dras.utilityoperator.UtilityOperator.java - Copyright(c)1994 to 2010 by Akuacom . All rights reserved. 
 * Redistribution and use in source and binary forms, with or without modification, is prohibited.
 *
 */

package org.openadr.dras.utilityoperator;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import org.openadr.dras.bid.ListOfBids;
import org.openadr.dras.drasclient.ListOfCommsStatus;
import org.openadr.dras.eventstate.ListOfEventStates;
import org.openadr.dras.feedback.ListOfFeedback;
import org.openadr.dras.logs.ListOfDRASClientAlarms;
import org.openadr.dras.logs.ListOfTransactionLogs;
import org.openadr.dras.participantaccount.ListOfParticipantAccountIDs;
import org.openadr.dras.participantaccount.ListOfParticipantAccounts;
import org.openadr.dras.programconstraint.ConstraintFilter;
import org.openadr.dras.programconstraint.DateTimeWindow;
import org.openadr.dras.programconstraint.ProgramConstraint;
import org.openadr.dras.utilitydrevent.ListOfEventIDs;
import org.openadr.dras.utilitydrevent.ListOfUtilityDREvents;
import org.openadr.dras.utilitydrevent.UtilityDREvent;
import org.openadr.dras.utilityprogram.ListOfIDs;
import org.openadr.dras.utilityprogram.ListOfProgramNames;
import org.openadr.dras.utilityprogram.ListOfPrograms;
import org.openadr.dras.utilityprogram.ParticipantList;
import org.openadr.dras.utilityprogram.UtilityProgram;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.1-b03-
 * Generated source version: 2.0
 */
@WebService(name = "UtilityOperator", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/")
public interface UtilityOperator {


    /**
     * This function is implemented on the DRAS and is used by
     * the Utility/ISO to initiate a DR Event. All the event
     * information is passed in concerning the event along with
     * a specification of the Participants that should receive
     * the event. In the case where bidding is required as part of the Program then this method call will initiate the bidding process.
     * 
     * Before the Utility/ISO can issue a DR Event it is
     * assumed that all the relevant information concerning the
     * DR Program and Participants has been configured.
     * 
     * Once the DR Event is initiated by the Utility/ISO the DR
     * Event information will be sent to the Participants at
     * the appropriate time depending upon whether the
     * Participant is configured to use a Smart DRAS Client or
     * a Simple DRAS Client. For more information on this
     * mechanism see the section concerning the event
     * propagation model.
     * 
     * It is possible to call this method numerous times and initiate a DR Events with the same e
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param returnValue the return value
     * @param drEvent the dr event
     * @param constraintValue the constraint value
     */
    @WebMethod(operationName = "InitiateDREvent", action = "http://www.openadr.org/DRAS/UtilityOperator/InitiateDREvent")
    @RequestWrapper(localName = "InitiateDREvent", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.InitiateDREvent")
    @ResponseWrapper(localName = "InitiateDREventResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.InitiateDREventResponse")
    public void initiateDREvent(
        @WebParam(name = "DR_Event", targetNamespace = "")
        UtilityDREvent drEvent,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue,
        @WebParam(name = "constraintValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ConstraintFilter> constraintValue);

    /**
     * This function is used to edit a previously issued DR
     * Event. It must reference the DR Event id that was
     * assigned by the Utility/ISO when the event was issued.
     * 
     * The following types of modifications can be made to an
     * already initiated DR Event:
     * 
     * - Cancel a DR Event. This
     * will immediately cancel a pending DR event. If the DR
     * Event information has already been sent to the
     * Participants then a message will be sent which notifies
     * them of the change in the DR Event. A DR Event can be
     * cancelled at any time.
     * 
     * - Change the Participant list. This will modify the list
     * of Participants that will receive the DR Event. If there
     * are Participants that have been dropped off the list
     * that have already been notified of the DR Event then
     * they will be sent messages by the DRAS notifying them
     * that the DR Event has been cancelled.
     * 
     * - Modify DR Event parameters. This will modify the
     * parameters of an already initiated DR Event. If the DR
     * Event information has already been sent to a Participant
     * then that Participant will be sent the new information.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param eventID the event id
     * @param returnValue the return value
     * @param drEvent the dr event
     * @param modificationType the modification type
     * @param constraintValue the constraint value
     */
    @WebMethod(operationName = "ModifyDREvent", action = "http://www.openadr.org/DRAS/UtilityOperator/ModifyDREvent")
    @RequestWrapper(localName = "ModifyDREvent", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.ModifyDREvent")
    @ResponseWrapper(localName = "ModifyDREventResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.ModifyDREventResponse")
    public void modifyDREvent(
        @WebParam(name = "eventID", targetNamespace = "")
        String eventID,
        @WebParam(name = "modificationType", targetNamespace = "")
        String modificationType,
        @WebParam(name = "DR_Event", targetNamespace = "")
        UtilityDREvent drEvent,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue,
        @WebParam(name = "constraintValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ConstraintFilter> constraintValue);

    /**
     * This function will modify the list of Participants that
     * will receive an already existing DR Event. If there are
     * Participants that have been dropped off the list that
     * have already been notified of the DR Event then they
     * will be sent messages by the DRAS notifying them that
     * the DR Event has been cancelled.
     * 
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param addParticipants the add participants
     * @param eventID the event id
     * @param participantList the participant list
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "AdjustDREventParticipants", action = "http://www.openadr.org/DRAS/UtilityOperator/AdjustDREventParticipants")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "AdjustDREventParticipants", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.AdjustDREventParticipants")
    @ResponseWrapper(localName = "AdjustDREventParticipantsResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.AdjustDREventParticipantsResponse")
    public String adjustDREventParticipants(
        @WebParam(name = "eventID", targetNamespace = "")
        String eventID,
        @WebParam(name = "addParticipants", targetNamespace = "")
        boolean addParticipants,
        @WebParam(name = "participantList", targetNamespace = "")
        ParticipantList participantList);

    /**
     * This function is used to get information related to
     * currently pending or active DR Events within the DRAS.
     * There are a number of keys that may be used to specify
     * which Utility DR Event objects are returned. A Utility
     * DR Event object is returned if it satisfies all of the
     * search criteria specified in the list of parameters.
     * 
     * Note that if none of the search keys are specified then
     * all pending or active Utility DR Event entities are
     * returned.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param drEvents the dr events
     * @param eventID the event id
     * @param returnValue the return value
     * @param participants the participants
     * @param programNames the program names
     */
    @WebMethod(operationName = "GetDREventInformation", action = "http://www.openadr.org/DRAS/UtilityOperator/GetDREventInformation")
    @RequestWrapper(localName = "GetDREventInformation", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetDREventInformation")
    @ResponseWrapper(localName = "GetDREventInformationResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetDREventInformationResponse")
    public void getDREventInformation(
        @WebParam(name = "eventID", targetNamespace = "")
        ListOfEventIDs eventID,
        @WebParam(name = "programNames", targetNamespace = "")
        ListOfProgramNames programNames,
        @WebParam(name = "participants", targetNamespace = "")
        ParticipantList participants,
        @WebParam(name = "DREvents", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfUtilityDREvents> drEvents,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to create a new DR program.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param program the program
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "CreateProgram", action = "http://www.openadr.org/DRAS/UtilityOperator/CreateProgram")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "CreateProgram", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.CreateProgram")
    @ResponseWrapper(localName = "CreateProgramResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.CreateProgramResponse")
    public String createProgram(
        @WebParam(name = "program", targetNamespace = "")
        UtilityProgram program);

    /**
     * This function is used to modify an existing Program that
     * was created with the CreateProgram function.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param program the program
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "ModifyProgram", action = "http://www.openadr.org/DRAS/UtilityOperator/ModifyProgram")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "ModifyProgram", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.ModifyProgram")
    @ResponseWrapper(localName = "ModifyProgramResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.ModifyProgramResponse")
    public String modifyProgram(
        @WebParam(name = "program", targetNamespace = "")
        UtilityProgram program);

    /**
     * This function is used to delete an existing Program that
     * was created with the Create Program function. This
     * function must fail if there is any pending or active DR
     * Events associated with this program. Any pending events
     * must be canceled or allowed to complete before deleting
     * the program.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param programName the program name
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "DeleteProgram", action = "http://www.openadr.org/DRAS/UtilityOperator/DeleteProgram")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "DeleteProgram", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.DeleteProgram")
    @ResponseWrapper(localName = "DeleteProgramResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.DeleteProgramResponse")
    public String deleteProgram(
        @WebParam(name = "programName", targetNamespace = "")
        String programName);

    /**
     * This function is used to get all the information related
     * to Programs including the Program Constraints and Event
     * Info Types associated with the program. One of two keys
     * may be used to specify which programs to return. The
     * first is a list of prgram names and the second is a list
     * of participants. Note that if none of the above keys are
     * specified then all UtilityProgram objects are returned.
     * 
     * Parameters There are a two different keys that may be
     * used to specify which Utility Program entities are
     * returned.
     * 
     * Program name(s) these are the names of
     * programs that were created.
     * 
     * Participant/group id(s)     
     * these are the specifications for the participants that
     * are associated with various programs.
     * 
     * 
     * Return Values
     * 
     * List of Utility Program objects that
     * satisfy the search criteria specified. The associated
     * Program Constraints and Event Info Types for each
     * Utility Program object are also returned.
     * 
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param programList the program list
     * @param returnValue the return value
     * @param participants the participants
     * @param programNames the program names
     */
    @WebMethod(operationName = "GetPrograms", action = "http://www.openadr.org/DRAS/UtilityOperator/GetPrograms")
    @RequestWrapper(localName = "GetPrograms", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetPrograms")
    @ResponseWrapper(localName = "GetProgramsResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetProgramsResponse")
    public void getPrograms(
        @WebParam(name = "programNames", targetNamespace = "")
        ListOfProgramNames programNames,
        @WebParam(name = "participants", targetNamespace = "")
        ParticipantList participants,
        @WebParam(name = "programList", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfPrograms> programList,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to create one or more Participant
     * Accounts.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param participantAccounts the participant accounts
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "CreateParticipantAccounts", action = "http://www.openadr.org/DRAS/UtilityOperator/CreateParticipantAccounts")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "CreateParticipantAccounts", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.CreateParticipantAccounts")
    @ResponseWrapper(localName = "CreateParticipantAccountsResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.CreateParticipantAccountsResponse")
    public String createParticipantAccounts(
        @WebParam(name = "participantAccounts", targetNamespace = "")
        ListOfParticipantAccounts participantAccounts);

    /**
     * This function is used modify existing Participant
     * Accounts.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO
     * Operators
     * 
     * @param participantAccounts the participant accounts
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "ModifyParticipantAccounts", action = "http://www.openadr.org/DRAS/UtilityOperator/ModifyParticipantAccounts")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "ModifyParticipantAccounts", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.ModifyParticipantAccounts")
    @ResponseWrapper(localName = "ModifyParticipantAccountsResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.ModifyParticipantAccountsResponse")
    public String modifyParticipantAccounts(
        @WebParam(name = "participantAccounts", targetNamespace = "")
        ListOfParticipantAccounts participantAccounts);

    /**
     * Description This function is used to delete Participant
     * Accounts that were created with the
     * CreateParticipantAccounts function.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param participantAccountIDs the participant account i ds
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "DeleteParticipantAccounts", action = "http://www.openadr.org/DRAS/UtilityOperator/DeleteParticipantAccounts")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "DeleteParticipantAccounts", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.DeleteParticipantAccounts")
    @ResponseWrapper(localName = "DeleteParticipantAccountsResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.DeleteParticipantAccountsResponse")
    public String deleteParticipantAccounts(
        @WebParam(name = "participantAccountIDs", targetNamespace = "")
        ListOfParticipantAccountIDs participantAccountIDs);

    /**
     * This function is used to fetch all the ParticipantAccount
     * objects that satisfy the specified search criteria. The
     * search crieria is specified by a list of participant
     * specifications (account id's, Utility Group names, and
     * locations) or by the name of the Programs that the
     * ParticipantAccounts may be assiciated with. Note that if
     * no search criteria is specified then all Participant
     * Account objects are returned.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param participantAccounts the participant accounts
     * @param returnValue the return value
     * @param participants the participants
     * @param programName the program name
     */
    @WebMethod(operationName = "GetParticipantAccounts", action = "http://www.openadr.org/DRAS/UtilityOperator/GetParticipantAccounts")
    @RequestWrapper(localName = "GetParticipantAccounts", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetParticipantAccounts")
    @ResponseWrapper(localName = "GetParticipantAccountsResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetParticipantAccountsResponse")
    public void getParticipantAccounts(
        @WebParam(name = "participants", targetNamespace = "")
        ParticipantList participants,
        @WebParam(name = "programName", targetNamespace = "")
        String programName,
        @WebParam(name = "participantAccounts", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfParticipantAccounts> participantAccounts,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * Description This function is used to add or remove a
     * Participant from a program.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param addParticipants the add participants
     * @param participantList the participant list
     * @param programName the program name
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "AdjustProgramParticipants", action = "http://www.openadr.org/DRAS/UtilityOperator/AdjustProgramParticipants")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "AdjustProgramParticipants", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.AdjustProgramParticipants")
    @ResponseWrapper(localName = "AdjustProgramParticipantsResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.AdjustProgramParticipantsResponse")
    public String adjustProgramParticipants(
        @WebParam(name = "programName", targetNamespace = "")
        String programName,
        @WebParam(name = "addParticipants", targetNamespace = "")
        boolean addParticipants,
        @WebParam(name = "participantList", targetNamespace = "")
        ParticipantList participantList);

    /**
     * This function allows the Utility/ISO to request the
     * current Participant bids from the DRAS. The Utility/ISO
     * can either request bids for a specific event or all the
     * standing bids for a specific UProgram. Either an Event
     * ID or a Program name, but not both should be specified.
     * If an Event ID is specified then the returned bid are
     * only for those that pertain to a specific DR Event and
     * will include real time bids if any have been submitted
     * for that DR Event or the Participants standing bid if no
     * real time bids have been submitted for that event. If
     * the program name is specified then the standing bids of
     * the participants for the program are returned.
     * 
     * Parameters Event id this is the id of the DR event
     * that was assigned when the DR event was issued.
     * 
     * 
     * 
     * Return Values A list of Participant Bid objects for
     * each participant in the program. A true/false
     * indicator which signifies whether the bidding is still
     * open for the event.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param eventID the event id
     * @param returnValue the return value
     * @param bids the bids
     * @param biddingOpen the bidding open
     * @param programName the program name
     */
    @WebMethod(operationName = "GetCurrentBids", action = "http://www.openadr.org/DRAS/UtilityOperator/GetCurrentBids")
    @RequestWrapper(localName = "GetCurrentBids", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetCurrentBids")
    @ResponseWrapper(localName = "GetCurrentBidsResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetCurrentBidsResponse")
    public void getCurrentBids(
        @WebParam(name = "eventID", targetNamespace = "")
        String eventID,
        @WebParam(name = "programName", targetNamespace = "")
        String programName,
        @WebParam(name = "bids", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfBids> bids,
        @WebParam(name = "biddingOpen", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<Boolean> biddingOpen,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to explicitly close the bidding
     * for a particular DR event. When bidding is closed
     * Participants can no longer submit bids. When a DR Event
     * that requires bidding is issued it has a time in which
     * the bidding will close. This function can close that
     * bidding before that time. It is also recommended that it
     * be used with the PULL model to insure that the bidding
     * has closed before the Utility/ISO gets the final bidding
     * information.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param eventID the event id
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "CloseBidding", action = "http://www.openadr.org/DRAS/UtilityOperator/CloseBidding")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "CloseBidding", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.CloseBidding")
    @ResponseWrapper(localName = "CloseBiddingResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.CloseBiddingResponse")
    public String closeBidding(
        @WebParam(name = "eventID", targetNamespace = "")
        String eventID);

    /**
     * This function is used to notify the DRAS of which
     * previously submitted Participant Bids have been rejected
     * and accepted.
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param rejectedBids the rejected bids
     * @param eventID the event id
     * @param acceptedBids the accepted bids
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "SetBidStatus", action = "http://www.openadr.org/DRAS/UtilityOperator/SetBidStatus")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "SetBidStatus", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.SetBidStatus")
    @ResponseWrapper(localName = "SetBidStatusResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.SetBidStatusResponse")
    public String setBidStatus(
        @WebParam(name = "eventID", targetNamespace = "")
        String eventID,
        @WebParam(name = "acceptedBids", targetNamespace = "")
        ListOfUtilityDREvents acceptedBids,
        @WebParam(name = "rejectedBids", targetNamespace = "")
        ListOfParticipantAccountIDs rejectedBids);

    /**
     * This function is for retrieving a DRAS Clients current
     * communication state. The states can be fetched based
     * upon aa ParticipantAccount identifier, or a Program
     * name. If none of those parameters are specified then the
     * states of all DRAS Clients are returned
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param drasClientStatus the dras client status
     * @param returnValue the return value
     * @param participants the participants
     * @param programNames the program names
     */
    @WebMethod(operationName = "GetDRASClientCommsStatus", action = "http://www.openadr.org/DRAS/UtilityOperator/GetDRASClientCommsStatus")
    @RequestWrapper(localName = "GetDRASClientCommsStatus", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetDRASClientCommsStatus")
    @ResponseWrapper(localName = "GetDRASClientCommsStatusResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetDRASClientCommsStatusResponse")
    public void getDRASClientCommsStatus(
        @WebParam(name = "participants", targetNamespace = "")
        ParticipantList participants,
        @WebParam(name = "programNames", targetNamespace = "")
        ListOfProgramNames programNames,
        @WebParam(name = "DRASClientStatus", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfCommsStatus> drasClientStatus,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to retrieve any of the transaction
     * logs associated with the DRAS. A number of search keys
     * can be used to specify whcih transactions are retrieved
     * 
     * Parameters Transaction users this is an identifier
     * that is used to specify which users were involved in the
     * transaction. There are three ways in which the users may
     * be specified. User name(s) this is the user name
     * associated with the transaction being fetched. o
     * Participant id(s) this is the identifier of the
     * Participant that was involved with the transactions. All
     * users including DRAS Clients that are associated with
     * that Participant are used. DRAS Client id(s) this is
     * an optional parameter that is the identifier for the
     * DRAS Client whose transactions are being retrieved. In
     * essence this provides a convenient way to fetch the
     * communications log for a DRAS Client. Method name      
     * this is the name of the function that was invoked to
     * create the transaction. In essence this is the type of
     * transaction. If not specified then all transactions are
     * returned. Data/time interval this is the interval of
     * time that the transactions are being retrieved for. 
     * Result this optional parameter allows transactions the
     * be retrieved based upon whether they were SUCESSFUL or
     * FAILED.
     * 
     * Return Values SUCCESS or FAILURE
     * 
     * Authorized Users:
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param transactions the transactions
     * @param timeInterval the time interval
     * @param participantIDs the participant i ds
     * @param returnValue the return value
     * @param resultCode the result code
     * @param userNames the user names
     * @param methodName the method name
     * @param drasClientIDs the dras client i ds
     */
    @WebMethod(operationName = "GetDRASTransactions", action = "http://www.openadr.org/DRAS/UtilityOperator/GetDRASTransactions")
    @RequestWrapper(localName = "GetDRASTransactions", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetDRASTransactions")
    @ResponseWrapper(localName = "GetDRASTransactionsResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetDRASTransactionsResponse")
    public void getDRASTransactions(
        @WebParam(name = "userNames", targetNamespace = "")
        ListOfIDs userNames,
        @WebParam(name = "DRASClientIDs", targetNamespace = "")
        ListOfIDs drasClientIDs,
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfIDs participantIDs,
        @WebParam(name = "methodName", targetNamespace = "")
        String methodName,
        @WebParam(name = "timeInterval", targetNamespace = "")
        DateTimeWindow timeInterval,
        @WebParam(name = "resultCode", targetNamespace = "")
        String resultCode,
        @WebParam(name = "transactions", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfTransactionLogs> transactions,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to retrieve DRAS Event States
     * that have been created within the DRAS.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param returnValue the return value
     * @param drasClients the dras clients
     * @param eventStates the event states
     * @param eventIDs the event i ds
     * @param participants the participants
     * @param programNames the program names
     */
    @WebMethod(operationName = "GetDRASEventStates", action = "http://www.openadr.org/DRAS/UtilityOperator/GetDRASEventStates")
    @RequestWrapper(localName = "GetDRASEventStates", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetDRASEventStates")
    @ResponseWrapper(localName = "GetDRASEventStatesResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetDRASEventStatesResponse")
    public void getDRASEventStates(
        @WebParam(name = "eventIDs", targetNamespace = "")
        ListOfEventIDs eventIDs,
        @WebParam(name = "programNames", targetNamespace = "")
        ListOfProgramNames programNames,
        @WebParam(name = "participants", targetNamespace = "")
        ParticipantList participants,
        @WebParam(name = "drasClients", targetNamespace = "")
        ListOfIDs drasClients,
        @WebParam(name = "eventStates", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfEventStates> eventStates,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to retrieve DRAS Client Alarms
     * that have been logged within the DRAS.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param timeInterval the time interval
     * @param participantIDs the participant i ds
     * @param returnValue the return value
     * @param alarms the alarms
     * @param drasClientIDs the dras client i ds
     */
    @WebMethod(operationName = "GetDRASClientAlarms", action = "http://www.openadr.org/DRAS/UtilityOperator/GetDRASClientAlarms")
    @RequestWrapper(localName = "GetDRASClientAlarms", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetDRASClientAlarms")
    @ResponseWrapper(localName = "GetDRASClientAlarmsResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetDRASClientAlarmsResponse")
    public void getDRASClientAlarms(
        @WebParam(name = "DRASClientIDs", targetNamespace = "")
        ListOfIDs drasClientIDs,
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfIDs participantIDs,
        @WebParam(name = "timeInterval", targetNamespace = "")
        DateTimeWindow timeInterval,
        @WebParam(name = "alarms", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfDRASClientAlarms> alarms,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function is used to fetch a list of Feedback
     * objects based upon a set of search criteria
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators.
     * 
     * @param feedback the feedback
     * @param timeInterval the time interval
     * @param participantIDs the participant i ds
     * @param returnValue the return value
     * @param name the name
     * @param drasClientIDs the dras client i ds
     * @param programNames the program names
     */
    @WebMethod(operationName = "GetParticipantFeedback", action = "http://www.openadr.org/DRAS/UtilityOperator/GetParticipantFeedback")
    @RequestWrapper(localName = "GetParticipantFeedback", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetParticipantFeedback")
    @ResponseWrapper(localName = "GetParticipantFeedbackResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetParticipantFeedbackResponse")
    public void getParticipantFeedback(
        @WebParam(name = "DRASClientIDs", targetNamespace = "")
        ListOfIDs drasClientIDs,
        @WebParam(name = "participantIDs", targetNamespace = "")
        ListOfIDs participantIDs,
        @WebParam(name = "programNames", targetNamespace = "")
        ListOfIDs programNames,
        @WebParam(name = "timeInterval", targetNamespace = "")
        DateTimeWindow timeInterval,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "feedback", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfFeedback> feedback,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This function returns all the defined groups for all
     * ParticipantAccounts.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param returnValue the return value
     * @param empty the empty
     * @param groups the groups
     */
    @WebMethod(operationName = "GetGroups", action = "http://www.openadr.org/DRAS/UtilityOperator/GetGroups")
    @RequestWrapper(localName = "GetGroups", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetGroups")
    @ResponseWrapper(localName = "GetGroupsResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetGroupsResponse")
    public void getGroups(
        @WebParam(name = "empty", targetNamespace = "")
        Object empty,
        @WebParam(name = "groups", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ListOfIDs> groups,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

    /**
     * This is method is used to set ProgramConstraints that are applied to a specific DR Event.
     * They must adhere to the ProgramConstraints that are part of a specific Program.
     * If ProgramConstraints are set for a specific DR Event then they are associated with the
     * event identifier for that DR Event and each subsequent DR Evetn with that identifier that is initiated
     * must adhere to those constraints.
     * If there are no ProgramConstraints specifically set for a DR Event then any DR Events issued will adhere
     * to the normal set of ProgramConstraints established for the Program, Participants, or the DRAS Client .
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param eventID the event id
     * @param constraint the constraint
     * 
     * @return the string
     * 
     * returns java.lang.String
     */
    @WebMethod(operationName = "SetEventConstraint", action = "http://www.openadr.org/DRAS/UtilityOperator/SetEventConstraint")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "SetEventConstraint", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.SetEventConstraint")
    @ResponseWrapper(localName = "SetEventConstraintResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.SetEventConstraintResponse")
    public String setEventConstraint(
        @WebParam(name = "eventID", targetNamespace = "")
        String eventID,
        @WebParam(name = "constraint", targetNamespace = "")
        ProgramConstraint constraint);

    /**
     * This is used to fetch a ProgramConstraint that may have been set by a call to the SetEventConstraint method.
     * 
     * Authorized Users
     * 
     * - All DRAS Operators
     * 
     * - All Utility/ISO Operators
     * 
     * @param eventID the event id
     * @param returnValue the return value
     * @param constraint the constraint
     */
    @WebMethod(operationName = "GetEventConstraint", action = "http://www.openadr.org/DRAS/UtilityOperator/GetEventConstraint")
    @RequestWrapper(localName = "GetEventConstraint", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetEventConstraint")
    @ResponseWrapper(localName = "GetEventConstraintResponse", targetNamespace = "http://www.openadr.org/DRAS/UtilityOperator/", className = "org.openadr.dras.utilityoperator.GetEventConstraintResponse")
    public void getEventConstraint(
        @WebParam(name = "eventID", targetNamespace = "")
        String eventID,
        @WebParam(name = "constraint", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<ProgramConstraint> constraint,
        @WebParam(name = "returnValue", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> returnValue);

}
